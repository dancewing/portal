import org.apache.commons.lang3.SystemUtils
import org.apache.commons.text.StringEscapeUtils

import java.nio.charset.Charset
import java.nio.file.Files
import java.nio.file.Paths
import java.nio.file.StandardOpenOption
import java.util.UUID

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath group: 'org.apache.commons', name: 'commons-text', version: '1.1'
        classpath group: 'org.apache.commons', name: 'commons-lang3', version: '3.6'
    }
}

group = 'com.acn.portal'
version = '1.0.1'
description = 'Portal Application Using Micro-Service'

defaultTasks 'build'

def isWin = System.getProperty('os.name').toLowerCase().contains('windows')
def isOSX = System.getProperty('os.name').toLowerCase().contains('mac')
def isNix = (System.getProperty('os.name').toLowerCase().contains('nix') || System.getProperty('os.name').toLowerCase().contains('aix') || System.getProperty('os.name').toLowerCase().contains('nux'))

def commandLinePrefix = []
def startUpFile = "./startup.sh"
def shutDownFile = "./shutdown.sh"
if (isWin) {
    startUpFile = "startup.bat"
    shutDownFile = "shutdown.bat"
    commandLinePrefix = ["cmd", "/c"]
}

def getModule() {
    if (project.hasProperty("moduleName")) {
        def moduleName = project.property("moduleName")
        moduleName = moduleName.trim().toLowerCase()
        return moduleName.trim().isEmpty() ? "all" : moduleName
    } else {
        return "all"
    }
}

def cleanModule(commandLinePrefix, module) {
    def ctask = tasks.findByPath("clean${module}")
    if (ctask != null) {
        return ctask
    } else {
        return tasks.create("clean${module}") {
            executeProcess(commandLinePrefix + commandLinePrefix + ["mvn", "clean"], "./modules/${module}".toString())
        }
    }
}

def buildModule(commandLinePrefix, module, path = "./modules/", commandLinePost = [], forceTest = false) {
    def btask = tasks.findByPath("build${module}")
    def actualCommandLinePost = [];
    actualCommandLinePost.addAll(commandLinePost)
    if (!testArtifacts && !forceTest) { //ForceTest is needed to make test-suite run since, well they are tests
        actualCommandLinePost.add("-Dmaven.test.skip=true")
        // Ignore integration test to avoid starting mongo and jetty for nothing
        if (module.equalsIgnoreCase("search")) {
            actualCommandLinePost.add("-pl")
            actualCommandLinePost.add("!crafter-search-itest")
        } else if (module.equalsIgnoreCase("profile")) {
            actualCommandLinePost.add("-pl")
            if (!includeProfile) {
                actualCommandLinePost.add("!admin-console,!integration-tests,!server")
            } else {
                actualCommandLinePost.add("!integration-tests")
            }
        }
    }

    if (btask != null) {
        return btask
    } else {
        return tasks.create("build${module}") {
            if (module.equalsIgnoreCase("studio") && !studioUIFromRepo) {
                actualCommandLinePost.add("-Dstudio.ui.path=../studio-ui/".toString())
                actualCommandLinePost.add("-Dexec.skip=true")
            }
            // Always do a Clean build, never trust caches or FS.
            def array = commandLinePrefix + commandLinePrefix + ["mvn", "clean", "install"] + actualCommandLinePost
            executeProcess(array, "${path}${module}".toString())
        }
    }
}

def executeProcess(command, workingDir, printOutputUntilFinish = false) {
    ProcessBuilder pb = new ProcessBuilder(command)
    def processOutput = File.createTempFile("process", "out")
    pb.directory(new File(workingDir))
    pb.redirectOutput(processOutput)
    Process proc = pb.start();
    watchProcessOutput(proc, processOutput)
    proc.waitFor()
    if (proc.exitValue() != 0) {
        throw new GradleException("${command} @ ${workingDir} return a  non-zero value (${proc.exitValue()})")
    }
}
// Poor's man tail (but get's the job done
def watchProcessOutput(process, processOutputFile) {
    Thread.start {

        def reader = null
        if (System.getProperty('os.name').toLowerCase().contains('windows')) {
            reader = Files.newBufferedReader(Paths.get(processOutputFile.path), Charset.forName("ISO-8859-1"))
        } else {
            reader = Files.newBufferedReader(Paths.get(processOutputFile.path), Charset.forName("UTF-8"))
        }
        while (process.alive) {
            def line = null
            while ((line = reader.readLine()) != null) {
                logger.lifecycle line
            }
        }
        processOutputFile.delete()
    }
}

ext {
    testArtifacts = project.hasProperty("crafter.unittest") ? project.property("crafter.unittest") : false
    includeSocial = false
    VALID_MODULES = ["portal-kernel/portal-kernel-api", "portal-utils","portal-kernel/portal-kernel-impl", "portal-uaa", "portal-web"]
}

task("init") {
    description "Init Extra maven dependency"

    doFirst {
        def module = getModule();
    }

    doLast {
        def toBuildModules = VALID_MODULES
        toBuildModules.remove("studio-ui")
        toBuildModules.remove("test-suite")
        if (!includeSocial) {
            toBuildModules.remove("social")
        }
        if (module.equals("all")) {
            toBuildModules.each {
                buildModule(commandLinePrefix, it).execute()
            }
        } else if (toBuildModules.contains(module)) {
            buildModule(commandLinePrefix, module).execute()

        } else {
            throw new InvalidUserDataException("${module} is not a valid module, please use one of ${VALID_MODULES}")
        }
    }
}

task("build") {
    description "Builds Portal"

    doFirst {
        def module = getModule();
    }

    doLast {
        def toBuildModules = VALID_MODULES
        toBuildModules.remove("studio-ui")
        toBuildModules.remove("test-suite")
        if (!includeSocial) {
            toBuildModules.remove("social")
        }
        if (module.equals("all")) {
            toBuildModules.each {
                buildModule(commandLinePrefix, it).execute()
            }
        } else if (toBuildModules.contains(module)) {
            buildModule(commandLinePrefix, module).execute()

        } else {
            throw new InvalidUserDataException("${module} is not a valid module, please use one of ${VALID_MODULES}")
        }
    }
}

task("clean") {
    description "Clean Crafter CMS stack"

    doFirst {
        def module = getModule();
    }

    doLast {
        if (module.equals("all")) {
            VALID_MODULES.each {
                if (!(it.equalsIgnoreCase("studio-ui") || (it.equalsIgnoreCase("test-suite")))) {
                    // Not a pom project ignore
                    cleanModule(commandLinePrefix, it).execute()
                }
            }
        } else if (VALID_MODULES.contains(module)) {
            if (!(module.equalsIgnoreCase("studio-ui") || (module.equalsIgnoreCase("test-suite")))) {
                // Not a pom project ignore
                cleanModule(commandLinePrefix, module).execute()
            }
        } else {
            throw new InvalidUserDataException("${module} is not a valid module, please use one of ${VALID_MODULES}")
        }
    }
}
