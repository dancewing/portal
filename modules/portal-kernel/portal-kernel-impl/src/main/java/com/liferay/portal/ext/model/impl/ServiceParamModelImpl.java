/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.portal.ext.model.impl;

import com.liferay.portal.ext.model.ServiceParam;
import com.liferay.portal.ext.model.ServiceParamModel;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ServiceParam service. Represents a row in the &quot;ServiceParam&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.portal.ext.model.ServiceParamModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ServiceParamImpl}.
 * </p>
 *
 * @author Jeff Qian
 * @see ServiceParamImpl
 * @see com.liferay.portal.ext.model.ServiceParam
 * @see com.liferay.portal.ext.model.ServiceParamModel
 * @generated
 */
public class ServiceParamModelImpl extends BaseModelImpl<ServiceParam>
	implements ServiceParamModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a service param model instance should use the {@link com.liferay.portal.ext.model.ServiceParam} interface instead.
	 */
	public static final String TABLE_NAME = "ServiceParam";
	public static final Object[][] TABLE_COLUMNS = {
			{ "paramId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "classNameId", Types.BIGINT },
			{ "classPK", Types.BIGINT },
			{ "paramType", Types.VARCHAR },
			{ "paramName", Types.VARCHAR },
			{ "paramValue", Types.VARCHAR },
			{ "paramObject", Types.VARCHAR },
			{ "paramDesc", Types.VARCHAR },
			{ "defaultValue", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table ServiceParam (paramId LONG not null primary key,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,classNameId LONG,classPK LONG,paramType VARCHAR(75) null,paramName VARCHAR(75) null,paramValue VARCHAR(75) null,paramObject VARCHAR(75) null,paramDesc VARCHAR(75) null,defaultValue VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table ServiceParam";
	public static final String ORDER_BY_JPQL = " ORDER BY serviceParam.paramId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY ServiceParam.paramId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.portal.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.liferay.portal.ext.model.ServiceParam"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.portal.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.liferay.portal.ext.model.ServiceParam"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.portal.util.PropsUtil.get(
				"value.object.column.bitmask.enabled.com.liferay.portal.ext.model.ServiceParam"),
			true);
	public static long CLASSNAMEID_COLUMN_BITMASK = 1L;
	public static long CLASSPK_COLUMN_BITMASK = 2L;
	public static long PARAMTYPE_COLUMN_BITMASK = 4L;
	public static long PARAMID_COLUMN_BITMASK = 8L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.portal.util.PropsUtil.get(
				"lock.expiration.time.com.liferay.portal.ext.model.ServiceParam"));

	public ServiceParamModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _paramId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setParamId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _paramId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ServiceParam.class;
	}

	@Override
	public String getModelClassName() {
		return ServiceParam.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("paramId", getParamId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("classNameId", getClassNameId());
		attributes.put("classPK", getClassPK());
		attributes.put("paramType", getParamType());
		attributes.put("paramName", getParamName());
		attributes.put("paramValue", getParamValue());
		attributes.put("paramObject", getParamObject());
		attributes.put("paramDesc", getParamDesc());
		attributes.put("defaultValue", getDefaultValue());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long paramId = (Long)attributes.get("paramId");

		if (paramId != null) {
			setParamId(paramId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long classNameId = (Long)attributes.get("classNameId");

		if (classNameId != null) {
			setClassNameId(classNameId);
		}

		Long classPK = (Long)attributes.get("classPK");

		if (classPK != null) {
			setClassPK(classPK);
		}

		String paramType = (String)attributes.get("paramType");

		if (paramType != null) {
			setParamType(paramType);
		}

		String paramName = (String)attributes.get("paramName");

		if (paramName != null) {
			setParamName(paramName);
		}

		String paramValue = (String)attributes.get("paramValue");

		if (paramValue != null) {
			setParamValue(paramValue);
		}

		String paramObject = (String)attributes.get("paramObject");

		if (paramObject != null) {
			setParamObject(paramObject);
		}

		String paramDesc = (String)attributes.get("paramDesc");

		if (paramDesc != null) {
			setParamDesc(paramDesc);
		}

		String defaultValue = (String)attributes.get("defaultValue");

		if (defaultValue != null) {
			setDefaultValue(defaultValue);
		}
	}

	@Override
	public long getParamId() {
		return _paramId;
	}

	@Override
	public void setParamId(long paramId) {
		_paramId = paramId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public String getClassName() {
		if (getClassNameId() <= 0) {
			return StringPool.BLANK;
		}

		return PortalUtil.getClassName(getClassNameId());
	}

	@Override
	public void setClassName(String className) {
		long classNameId = 0;

		if (Validator.isNotNull(className)) {
			classNameId = PortalUtil.getClassNameId(className);
		}

		setClassNameId(classNameId);
	}

	@Override
	public long getClassNameId() {
		return _classNameId;
	}

	@Override
	public void setClassNameId(long classNameId) {
		_columnBitmask |= CLASSNAMEID_COLUMN_BITMASK;

		if (!_setOriginalClassNameId) {
			_setOriginalClassNameId = true;

			_originalClassNameId = _classNameId;
		}

		_classNameId = classNameId;
	}

	public long getOriginalClassNameId() {
		return _originalClassNameId;
	}

	@Override
	public long getClassPK() {
		return _classPK;
	}

	@Override
	public void setClassPK(long classPK) {
		_columnBitmask |= CLASSPK_COLUMN_BITMASK;

		if (!_setOriginalClassPK) {
			_setOriginalClassPK = true;

			_originalClassPK = _classPK;
		}

		_classPK = classPK;
	}

	public long getOriginalClassPK() {
		return _originalClassPK;
	}

	@Override
	public String getParamType() {
		if (_paramType == null) {
			return StringPool.BLANK;
		}
		else {
			return _paramType;
		}
	}

	@Override
	public void setParamType(String paramType) {
		_columnBitmask |= PARAMTYPE_COLUMN_BITMASK;

		if (_originalParamType == null) {
			_originalParamType = _paramType;
		}

		_paramType = paramType;
	}

	public String getOriginalParamType() {
		return GetterUtil.getString(_originalParamType);
	}

	@Override
	public String getParamName() {
		if (_paramName == null) {
			return StringPool.BLANK;
		}
		else {
			return _paramName;
		}
	}

	@Override
	public void setParamName(String paramName) {
		_paramName = paramName;
	}

	@Override
	public String getParamValue() {
		if (_paramValue == null) {
			return StringPool.BLANK;
		}
		else {
			return _paramValue;
		}
	}

	@Override
	public void setParamValue(String paramValue) {
		_paramValue = paramValue;
	}

	@Override
	public String getParamObject() {
		if (_paramObject == null) {
			return StringPool.BLANK;
		}
		else {
			return _paramObject;
		}
	}

	@Override
	public void setParamObject(String paramObject) {
		_paramObject = paramObject;
	}

	@Override
	public String getParamDesc() {
		if (_paramDesc == null) {
			return StringPool.BLANK;
		}
		else {
			return _paramDesc;
		}
	}

	@Override
	public void setParamDesc(String paramDesc) {
		_paramDesc = paramDesc;
	}

	@Override
	public String getDefaultValue() {
		if (_defaultValue == null) {
			return StringPool.BLANK;
		}
		else {
			return _defaultValue;
		}
	}

	@Override
	public void setDefaultValue(String defaultValue) {
		_defaultValue = defaultValue;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			ServiceParam.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ServiceParam toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ServiceParam)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ServiceParamImpl serviceParamImpl = new ServiceParamImpl();

		serviceParamImpl.setParamId(getParamId());
		serviceParamImpl.setUserId(getUserId());
		serviceParamImpl.setUserName(getUserName());
		serviceParamImpl.setCreateDate(getCreateDate());
		serviceParamImpl.setModifiedDate(getModifiedDate());
		serviceParamImpl.setClassNameId(getClassNameId());
		serviceParamImpl.setClassPK(getClassPK());
		serviceParamImpl.setParamType(getParamType());
		serviceParamImpl.setParamName(getParamName());
		serviceParamImpl.setParamValue(getParamValue());
		serviceParamImpl.setParamObject(getParamObject());
		serviceParamImpl.setParamDesc(getParamDesc());
		serviceParamImpl.setDefaultValue(getDefaultValue());

		serviceParamImpl.resetOriginalValues();

		return serviceParamImpl;
	}

	@Override
	public int compareTo(ServiceParam serviceParam) {
		long primaryKey = serviceParam.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ServiceParam)) {
			return false;
		}

		ServiceParam serviceParam = (ServiceParam)obj;

		long primaryKey = serviceParam.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ServiceParamModelImpl serviceParamModelImpl = this;

		serviceParamModelImpl._originalClassNameId = serviceParamModelImpl._classNameId;

		serviceParamModelImpl._setOriginalClassNameId = false;

		serviceParamModelImpl._originalClassPK = serviceParamModelImpl._classPK;

		serviceParamModelImpl._setOriginalClassPK = false;

		serviceParamModelImpl._originalParamType = serviceParamModelImpl._paramType;

		serviceParamModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ServiceParam> toCacheModel() {
		ServiceParamCacheModel serviceParamCacheModel = new ServiceParamCacheModel();

		serviceParamCacheModel.paramId = getParamId();

		serviceParamCacheModel.userId = getUserId();

		serviceParamCacheModel.userName = getUserName();

		String userName = serviceParamCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			serviceParamCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			serviceParamCacheModel.createDate = createDate.getTime();
		}
		else {
			serviceParamCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			serviceParamCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			serviceParamCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		serviceParamCacheModel.classNameId = getClassNameId();

		serviceParamCacheModel.classPK = getClassPK();

		serviceParamCacheModel.paramType = getParamType();

		String paramType = serviceParamCacheModel.paramType;

		if ((paramType != null) && (paramType.length() == 0)) {
			serviceParamCacheModel.paramType = null;
		}

		serviceParamCacheModel.paramName = getParamName();

		String paramName = serviceParamCacheModel.paramName;

		if ((paramName != null) && (paramName.length() == 0)) {
			serviceParamCacheModel.paramName = null;
		}

		serviceParamCacheModel.paramValue = getParamValue();

		String paramValue = serviceParamCacheModel.paramValue;

		if ((paramValue != null) && (paramValue.length() == 0)) {
			serviceParamCacheModel.paramValue = null;
		}

		serviceParamCacheModel.paramObject = getParamObject();

		String paramObject = serviceParamCacheModel.paramObject;

		if ((paramObject != null) && (paramObject.length() == 0)) {
			serviceParamCacheModel.paramObject = null;
		}

		serviceParamCacheModel.paramDesc = getParamDesc();

		String paramDesc = serviceParamCacheModel.paramDesc;

		if ((paramDesc != null) && (paramDesc.length() == 0)) {
			serviceParamCacheModel.paramDesc = null;
		}

		serviceParamCacheModel.defaultValue = getDefaultValue();

		String defaultValue = serviceParamCacheModel.defaultValue;

		if ((defaultValue != null) && (defaultValue.length() == 0)) {
			serviceParamCacheModel.defaultValue = null;
		}

		return serviceParamCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(27);

		sb.append("{paramId=");
		sb.append(getParamId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", classNameId=");
		sb.append(getClassNameId());
		sb.append(", classPK=");
		sb.append(getClassPK());
		sb.append(", paramType=");
		sb.append(getParamType());
		sb.append(", paramName=");
		sb.append(getParamName());
		sb.append(", paramValue=");
		sb.append(getParamValue());
		sb.append(", paramObject=");
		sb.append(getParamObject());
		sb.append(", paramDesc=");
		sb.append(getParamDesc());
		sb.append(", defaultValue=");
		sb.append(getDefaultValue());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(43);

		sb.append("<model><model-name>");
		sb.append("com.liferay.portal.ext.model.ServiceParam");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>paramId</column-name><column-value><![CDATA[");
		sb.append(getParamId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>classNameId</column-name><column-value><![CDATA[");
		sb.append(getClassNameId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>classPK</column-name><column-value><![CDATA[");
		sb.append(getClassPK());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>paramType</column-name><column-value><![CDATA[");
		sb.append(getParamType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>paramName</column-name><column-value><![CDATA[");
		sb.append(getParamName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>paramValue</column-name><column-value><![CDATA[");
		sb.append(getParamValue());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>paramObject</column-name><column-value><![CDATA[");
		sb.append(getParamObject());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>paramDesc</column-name><column-value><![CDATA[");
		sb.append(getParamDesc());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>defaultValue</column-name><column-value><![CDATA[");
		sb.append(getDefaultValue());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ServiceParam.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			ServiceParam.class
		};
	private long _paramId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private long _classNameId;
	private long _originalClassNameId;
	private boolean _setOriginalClassNameId;
	private long _classPK;
	private long _originalClassPK;
	private boolean _setOriginalClassPK;
	private String _paramType;
	private String _originalParamType;
	private String _paramName;
	private String _paramValue;
	private String _paramObject;
	private String _paramDesc;
	private String _defaultValue;
	private long _columnBitmask;
	private ServiceParam _escapedModel;
}