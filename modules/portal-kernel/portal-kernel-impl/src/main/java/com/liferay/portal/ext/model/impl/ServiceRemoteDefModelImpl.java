/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.portal.ext.model.impl;

import com.liferay.portal.ext.model.ServiceRemoteDef;
import com.liferay.portal.ext.model.ServiceRemoteDefModel;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ServiceRemoteDef service. Represents a row in the &quot;ServiceRemoteDef&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.portal.ext.model.ServiceRemoteDefModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ServiceRemoteDefImpl}.
 * </p>
 *
 * @author Jeff Qian
 * @see ServiceRemoteDefImpl
 * @see com.liferay.portal.ext.model.ServiceRemoteDef
 * @see com.liferay.portal.ext.model.ServiceRemoteDefModel
 * @generated
 */
public class ServiceRemoteDefModelImpl extends BaseModelImpl<ServiceRemoteDef>
	implements ServiceRemoteDefModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a service remote def model instance should use the {@link com.liferay.portal.ext.model.ServiceRemoteDef} interface instead.
	 */
	public static final String TABLE_NAME = "ServiceRemoteDef";
	public static final Object[][] TABLE_COLUMNS = {
			{ "remoteId", Types.BIGINT },
			{ "code_", Types.VARCHAR },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "tagId", Types.BIGINT },
			{ "host_", Types.BIGINT },
			{ "path_", Types.VARCHAR },
			{ "httpMethod", Types.VARCHAR },
			{ "rawString", Types.CLOB },
			{ "description", Types.VARCHAR },
			{ "deprecated", Types.BOOLEAN },
			{ "sendWithCookies", Types.BOOLEAN },
			{ "cookieDomain", Types.VARCHAR },
			{ "cookiePath", Types.VARCHAR },
			{ "scriptParameter", Types.CLOB },
			{ "scriptHeader", Types.CLOB },
			{ "scriptResponse", Types.CLOB },
			{ "cacheLiveTime", Types.INTEGER },
			{ "authId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table ServiceRemoteDef (remoteId LONG not null primary key,code_ VARCHAR(75) null,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,tagId LONG,host_ LONG,path_ VARCHAR(75) null,httpMethod VARCHAR(75) null,rawString TEXT null,description VARCHAR(75) null,deprecated BOOLEAN,sendWithCookies BOOLEAN,cookieDomain VARCHAR(75) null,cookiePath VARCHAR(75) null,scriptParameter TEXT null,scriptHeader TEXT null,scriptResponse TEXT null,cacheLiveTime INTEGER,authId LONG)";
	public static final String TABLE_SQL_DROP = "drop table ServiceRemoteDef";
	public static final String ORDER_BY_JPQL = " ORDER BY serviceRemoteDef.remoteId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY ServiceRemoteDef.remoteId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.portal.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.liferay.portal.ext.model.ServiceRemoteDef"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.portal.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.liferay.portal.ext.model.ServiceRemoteDef"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.portal.util.PropsUtil.get(
				"value.object.column.bitmask.enabled.com.liferay.portal.ext.model.ServiceRemoteDef"),
			true);
	public static long AUTHID_COLUMN_BITMASK = 1L;
	public static long CODE_COLUMN_BITMASK = 2L;
	public static long TAGID_COLUMN_BITMASK = 4L;
	public static long REMOTEID_COLUMN_BITMASK = 8L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.portal.util.PropsUtil.get(
				"lock.expiration.time.com.liferay.portal.ext.model.ServiceRemoteDef"));

	public ServiceRemoteDefModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _remoteId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setRemoteId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _remoteId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ServiceRemoteDef.class;
	}

	@Override
	public String getModelClassName() {
		return ServiceRemoteDef.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("remoteId", getRemoteId());
		attributes.put("code", getCode());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("tagId", getTagId());
		attributes.put("host", getHost());
		attributes.put("path", getPath());
		attributes.put("httpMethod", getHttpMethod());
		attributes.put("rawString", getRawString());
		attributes.put("description", getDescription());
		attributes.put("deprecated", getDeprecated());
		attributes.put("sendWithCookies", getSendWithCookies());
		attributes.put("cookieDomain", getCookieDomain());
		attributes.put("cookiePath", getCookiePath());
		attributes.put("scriptParameter", getScriptParameter());
		attributes.put("scriptHeader", getScriptHeader());
		attributes.put("scriptResponse", getScriptResponse());
		attributes.put("cacheLiveTime", getCacheLiveTime());
		attributes.put("authId", getAuthId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long remoteId = (Long)attributes.get("remoteId");

		if (remoteId != null) {
			setRemoteId(remoteId);
		}

		String code = (String)attributes.get("code");

		if (code != null) {
			setCode(code);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long tagId = (Long)attributes.get("tagId");

		if (tagId != null) {
			setTagId(tagId);
		}

		Long host = (Long)attributes.get("host");

		if (host != null) {
			setHost(host);
		}

		String path = (String)attributes.get("path");

		if (path != null) {
			setPath(path);
		}

		String httpMethod = (String)attributes.get("httpMethod");

		if (httpMethod != null) {
			setHttpMethod(httpMethod);
		}

		String rawString = (String)attributes.get("rawString");

		if (rawString != null) {
			setRawString(rawString);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		Boolean deprecated = (Boolean)attributes.get("deprecated");

		if (deprecated != null) {
			setDeprecated(deprecated);
		}

		Boolean sendWithCookies = (Boolean)attributes.get("sendWithCookies");

		if (sendWithCookies != null) {
			setSendWithCookies(sendWithCookies);
		}

		String cookieDomain = (String)attributes.get("cookieDomain");

		if (cookieDomain != null) {
			setCookieDomain(cookieDomain);
		}

		String cookiePath = (String)attributes.get("cookiePath");

		if (cookiePath != null) {
			setCookiePath(cookiePath);
		}

		String scriptParameter = (String)attributes.get("scriptParameter");

		if (scriptParameter != null) {
			setScriptParameter(scriptParameter);
		}

		String scriptHeader = (String)attributes.get("scriptHeader");

		if (scriptHeader != null) {
			setScriptHeader(scriptHeader);
		}

		String scriptResponse = (String)attributes.get("scriptResponse");

		if (scriptResponse != null) {
			setScriptResponse(scriptResponse);
		}

		Integer cacheLiveTime = (Integer)attributes.get("cacheLiveTime");

		if (cacheLiveTime != null) {
			setCacheLiveTime(cacheLiveTime);
		}

		Long authId = (Long)attributes.get("authId");

		if (authId != null) {
			setAuthId(authId);
		}
	}

	@Override
	public long getRemoteId() {
		return _remoteId;
	}

	@Override
	public void setRemoteId(long remoteId) {
		_remoteId = remoteId;
	}

	@Override
	public String getCode() {
		if (_code == null) {
			return StringPool.BLANK;
		}
		else {
			return _code;
		}
	}

	@Override
	public void setCode(String code) {
		_columnBitmask |= CODE_COLUMN_BITMASK;

		if (_originalCode == null) {
			_originalCode = _code;
		}

		_code = code;
	}

	public String getOriginalCode() {
		return GetterUtil.getString(_originalCode);
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public long getTagId() {
		return _tagId;
	}

	@Override
	public void setTagId(long tagId) {
		_columnBitmask |= TAGID_COLUMN_BITMASK;

		if (!_setOriginalTagId) {
			_setOriginalTagId = true;

			_originalTagId = _tagId;
		}

		_tagId = tagId;
	}

	public long getOriginalTagId() {
		return _originalTagId;
	}

	@Override
	public long getHost() {
		return _host;
	}

	@Override
	public void setHost(long host) {
		_host = host;
	}

	@Override
	public String getPath() {
		if (_path == null) {
			return StringPool.BLANK;
		}
		else {
			return _path;
		}
	}

	@Override
	public void setPath(String path) {
		_path = path;
	}

	@Override
	public String getHttpMethod() {
		if (_httpMethod == null) {
			return StringPool.BLANK;
		}
		else {
			return _httpMethod;
		}
	}

	@Override
	public void setHttpMethod(String httpMethod) {
		_httpMethod = httpMethod;
	}

	@Override
	public String getRawString() {
		if (_rawString == null) {
			return StringPool.BLANK;
		}
		else {
			return _rawString;
		}
	}

	@Override
	public void setRawString(String rawString) {
		_rawString = rawString;
	}

	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@Override
	public boolean getDeprecated() {
		return _deprecated;
	}

	@Override
	public boolean isDeprecated() {
		return _deprecated;
	}

	@Override
	public void setDeprecated(boolean deprecated) {
		_deprecated = deprecated;
	}

	@Override
	public boolean getSendWithCookies() {
		return _sendWithCookies;
	}

	@Override
	public boolean isSendWithCookies() {
		return _sendWithCookies;
	}

	@Override
	public void setSendWithCookies(boolean sendWithCookies) {
		_sendWithCookies = sendWithCookies;
	}

	@Override
	public String getCookieDomain() {
		if (_cookieDomain == null) {
			return StringPool.BLANK;
		}
		else {
			return _cookieDomain;
		}
	}

	@Override
	public void setCookieDomain(String cookieDomain) {
		_cookieDomain = cookieDomain;
	}

	@Override
	public String getCookiePath() {
		if (_cookiePath == null) {
			return StringPool.BLANK;
		}
		else {
			return _cookiePath;
		}
	}

	@Override
	public void setCookiePath(String cookiePath) {
		_cookiePath = cookiePath;
	}

	@Override
	public String getScriptParameter() {
		if (_scriptParameter == null) {
			return StringPool.BLANK;
		}
		else {
			return _scriptParameter;
		}
	}

	@Override
	public void setScriptParameter(String scriptParameter) {
		_scriptParameter = scriptParameter;
	}

	@Override
	public String getScriptHeader() {
		if (_scriptHeader == null) {
			return StringPool.BLANK;
		}
		else {
			return _scriptHeader;
		}
	}

	@Override
	public void setScriptHeader(String scriptHeader) {
		_scriptHeader = scriptHeader;
	}

	@Override
	public String getScriptResponse() {
		if (_scriptResponse == null) {
			return StringPool.BLANK;
		}
		else {
			return _scriptResponse;
		}
	}

	@Override
	public void setScriptResponse(String scriptResponse) {
		_scriptResponse = scriptResponse;
	}

	@Override
	public int getCacheLiveTime() {
		return _cacheLiveTime;
	}

	@Override
	public void setCacheLiveTime(int cacheLiveTime) {
		_cacheLiveTime = cacheLiveTime;
	}

	@Override
	public long getAuthId() {
		return _authId;
	}

	@Override
	public void setAuthId(long authId) {
		_columnBitmask |= AUTHID_COLUMN_BITMASK;

		if (!_setOriginalAuthId) {
			_setOriginalAuthId = true;

			_originalAuthId = _authId;
		}

		_authId = authId;
	}

	public long getOriginalAuthId() {
		return _originalAuthId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			ServiceRemoteDef.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ServiceRemoteDef toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ServiceRemoteDef)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ServiceRemoteDefImpl serviceRemoteDefImpl = new ServiceRemoteDefImpl();

		serviceRemoteDefImpl.setRemoteId(getRemoteId());
		serviceRemoteDefImpl.setCode(getCode());
		serviceRemoteDefImpl.setUserId(getUserId());
		serviceRemoteDefImpl.setUserName(getUserName());
		serviceRemoteDefImpl.setCreateDate(getCreateDate());
		serviceRemoteDefImpl.setModifiedDate(getModifiedDate());
		serviceRemoteDefImpl.setTagId(getTagId());
		serviceRemoteDefImpl.setHost(getHost());
		serviceRemoteDefImpl.setPath(getPath());
		serviceRemoteDefImpl.setHttpMethod(getHttpMethod());
		serviceRemoteDefImpl.setRawString(getRawString());
		serviceRemoteDefImpl.setDescription(getDescription());
		serviceRemoteDefImpl.setDeprecated(getDeprecated());
		serviceRemoteDefImpl.setSendWithCookies(getSendWithCookies());
		serviceRemoteDefImpl.setCookieDomain(getCookieDomain());
		serviceRemoteDefImpl.setCookiePath(getCookiePath());
		serviceRemoteDefImpl.setScriptParameter(getScriptParameter());
		serviceRemoteDefImpl.setScriptHeader(getScriptHeader());
		serviceRemoteDefImpl.setScriptResponse(getScriptResponse());
		serviceRemoteDefImpl.setCacheLiveTime(getCacheLiveTime());
		serviceRemoteDefImpl.setAuthId(getAuthId());

		serviceRemoteDefImpl.resetOriginalValues();

		return serviceRemoteDefImpl;
	}

	@Override
	public int compareTo(ServiceRemoteDef serviceRemoteDef) {
		long primaryKey = serviceRemoteDef.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ServiceRemoteDef)) {
			return false;
		}

		ServiceRemoteDef serviceRemoteDef = (ServiceRemoteDef)obj;

		long primaryKey = serviceRemoteDef.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ServiceRemoteDefModelImpl serviceRemoteDefModelImpl = this;

		serviceRemoteDefModelImpl._originalCode = serviceRemoteDefModelImpl._code;

		serviceRemoteDefModelImpl._originalTagId = serviceRemoteDefModelImpl._tagId;

		serviceRemoteDefModelImpl._setOriginalTagId = false;

		serviceRemoteDefModelImpl._originalAuthId = serviceRemoteDefModelImpl._authId;

		serviceRemoteDefModelImpl._setOriginalAuthId = false;

		serviceRemoteDefModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ServiceRemoteDef> toCacheModel() {
		ServiceRemoteDefCacheModel serviceRemoteDefCacheModel = new ServiceRemoteDefCacheModel();

		serviceRemoteDefCacheModel.remoteId = getRemoteId();

		serviceRemoteDefCacheModel.code = getCode();

		String code = serviceRemoteDefCacheModel.code;

		if ((code != null) && (code.length() == 0)) {
			serviceRemoteDefCacheModel.code = null;
		}

		serviceRemoteDefCacheModel.userId = getUserId();

		serviceRemoteDefCacheModel.userName = getUserName();

		String userName = serviceRemoteDefCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			serviceRemoteDefCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			serviceRemoteDefCacheModel.createDate = createDate.getTime();
		}
		else {
			serviceRemoteDefCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			serviceRemoteDefCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			serviceRemoteDefCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		serviceRemoteDefCacheModel.tagId = getTagId();

		serviceRemoteDefCacheModel.host = getHost();

		serviceRemoteDefCacheModel.path = getPath();

		String path = serviceRemoteDefCacheModel.path;

		if ((path != null) && (path.length() == 0)) {
			serviceRemoteDefCacheModel.path = null;
		}

		serviceRemoteDefCacheModel.httpMethod = getHttpMethod();

		String httpMethod = serviceRemoteDefCacheModel.httpMethod;

		if ((httpMethod != null) && (httpMethod.length() == 0)) {
			serviceRemoteDefCacheModel.httpMethod = null;
		}

		serviceRemoteDefCacheModel.rawString = getRawString();

		String rawString = serviceRemoteDefCacheModel.rawString;

		if ((rawString != null) && (rawString.length() == 0)) {
			serviceRemoteDefCacheModel.rawString = null;
		}

		serviceRemoteDefCacheModel.description = getDescription();

		String description = serviceRemoteDefCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			serviceRemoteDefCacheModel.description = null;
		}

		serviceRemoteDefCacheModel.deprecated = getDeprecated();

		serviceRemoteDefCacheModel.sendWithCookies = getSendWithCookies();

		serviceRemoteDefCacheModel.cookieDomain = getCookieDomain();

		String cookieDomain = serviceRemoteDefCacheModel.cookieDomain;

		if ((cookieDomain != null) && (cookieDomain.length() == 0)) {
			serviceRemoteDefCacheModel.cookieDomain = null;
		}

		serviceRemoteDefCacheModel.cookiePath = getCookiePath();

		String cookiePath = serviceRemoteDefCacheModel.cookiePath;

		if ((cookiePath != null) && (cookiePath.length() == 0)) {
			serviceRemoteDefCacheModel.cookiePath = null;
		}

		serviceRemoteDefCacheModel.scriptParameter = getScriptParameter();

		String scriptParameter = serviceRemoteDefCacheModel.scriptParameter;

		if ((scriptParameter != null) && (scriptParameter.length() == 0)) {
			serviceRemoteDefCacheModel.scriptParameter = null;
		}

		serviceRemoteDefCacheModel.scriptHeader = getScriptHeader();

		String scriptHeader = serviceRemoteDefCacheModel.scriptHeader;

		if ((scriptHeader != null) && (scriptHeader.length() == 0)) {
			serviceRemoteDefCacheModel.scriptHeader = null;
		}

		serviceRemoteDefCacheModel.scriptResponse = getScriptResponse();

		String scriptResponse = serviceRemoteDefCacheModel.scriptResponse;

		if ((scriptResponse != null) && (scriptResponse.length() == 0)) {
			serviceRemoteDefCacheModel.scriptResponse = null;
		}

		serviceRemoteDefCacheModel.cacheLiveTime = getCacheLiveTime();

		serviceRemoteDefCacheModel.authId = getAuthId();

		return serviceRemoteDefCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(43);

		sb.append("{remoteId=");
		sb.append(getRemoteId());
		sb.append(", code=");
		sb.append(getCode());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", tagId=");
		sb.append(getTagId());
		sb.append(", host=");
		sb.append(getHost());
		sb.append(", path=");
		sb.append(getPath());
		sb.append(", httpMethod=");
		sb.append(getHttpMethod());
		sb.append(", rawString=");
		sb.append(getRawString());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", deprecated=");
		sb.append(getDeprecated());
		sb.append(", sendWithCookies=");
		sb.append(getSendWithCookies());
		sb.append(", cookieDomain=");
		sb.append(getCookieDomain());
		sb.append(", cookiePath=");
		sb.append(getCookiePath());
		sb.append(", scriptParameter=");
		sb.append(getScriptParameter());
		sb.append(", scriptHeader=");
		sb.append(getScriptHeader());
		sb.append(", scriptResponse=");
		sb.append(getScriptResponse());
		sb.append(", cacheLiveTime=");
		sb.append(getCacheLiveTime());
		sb.append(", authId=");
		sb.append(getAuthId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(67);

		sb.append("<model><model-name>");
		sb.append("com.liferay.portal.ext.model.ServiceRemoteDef");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>remoteId</column-name><column-value><![CDATA[");
		sb.append(getRemoteId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>code</column-name><column-value><![CDATA[");
		sb.append(getCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tagId</column-name><column-value><![CDATA[");
		sb.append(getTagId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>host</column-name><column-value><![CDATA[");
		sb.append(getHost());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>path</column-name><column-value><![CDATA[");
		sb.append(getPath());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>httpMethod</column-name><column-value><![CDATA[");
		sb.append(getHttpMethod());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>rawString</column-name><column-value><![CDATA[");
		sb.append(getRawString());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>deprecated</column-name><column-value><![CDATA[");
		sb.append(getDeprecated());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sendWithCookies</column-name><column-value><![CDATA[");
		sb.append(getSendWithCookies());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cookieDomain</column-name><column-value><![CDATA[");
		sb.append(getCookieDomain());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cookiePath</column-name><column-value><![CDATA[");
		sb.append(getCookiePath());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>scriptParameter</column-name><column-value><![CDATA[");
		sb.append(getScriptParameter());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>scriptHeader</column-name><column-value><![CDATA[");
		sb.append(getScriptHeader());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>scriptResponse</column-name><column-value><![CDATA[");
		sb.append(getScriptResponse());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cacheLiveTime</column-name><column-value><![CDATA[");
		sb.append(getCacheLiveTime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>authId</column-name><column-value><![CDATA[");
		sb.append(getAuthId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ServiceRemoteDef.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			ServiceRemoteDef.class
		};
	private long _remoteId;
	private String _code;
	private String _originalCode;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private long _tagId;
	private long _originalTagId;
	private boolean _setOriginalTagId;
	private long _host;
	private String _path;
	private String _httpMethod;
	private String _rawString;
	private String _description;
	private boolean _deprecated;
	private boolean _sendWithCookies;
	private String _cookieDomain;
	private String _cookiePath;
	private String _scriptParameter;
	private String _scriptHeader;
	private String _scriptResponse;
	private int _cacheLiveTime;
	private long _authId;
	private long _originalAuthId;
	private boolean _setOriginalAuthId;
	private long _columnBitmask;
	private ServiceRemoteDef _escapedModel;
}