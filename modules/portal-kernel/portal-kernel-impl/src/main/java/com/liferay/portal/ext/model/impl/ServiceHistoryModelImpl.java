/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.portal.ext.model.impl;

import com.liferay.portal.ext.model.ServiceHistory;
import com.liferay.portal.ext.model.ServiceHistoryModel;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ServiceHistory service. Represents a row in the &quot;ServiceHistory&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.portal.ext.model.ServiceHistoryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ServiceHistoryImpl}.
 * </p>
 *
 * @author Jeff Qian
 * @see ServiceHistoryImpl
 * @see com.liferay.portal.ext.model.ServiceHistory
 * @see com.liferay.portal.ext.model.ServiceHistoryModel
 * @generated
 */
public class ServiceHistoryModelImpl extends BaseModelImpl<ServiceHistory>
	implements ServiceHistoryModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a service history model instance should use the {@link com.liferay.portal.ext.model.ServiceHistory} interface instead.
	 */
	public static final String TABLE_NAME = "ServiceHistory";
	public static final Object[][] TABLE_COLUMNS = {
			{ "hisId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "classNameId", Types.BIGINT },
			{ "classPK", Types.BIGINT },
			{ "page", Types.VARCHAR },
			{ "friendlyURL", Types.VARCHAR },
			{ "portletName", Types.VARCHAR },
			{ "statusCode", Types.INTEGER },
			{ "timeCost", Types.INTEGER },
			{ "responseText", Types.VARCHAR },
			{ "wrappedText", Types.VARCHAR },
			{ "debugInfo", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table ServiceHistory (hisId LONG not null primary key,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,classNameId LONG,classPK LONG,page VARCHAR(75) null,friendlyURL VARCHAR(75) null,portletName VARCHAR(75) null,statusCode INTEGER,timeCost INTEGER,responseText VARCHAR(75) null,wrappedText VARCHAR(75) null,debugInfo VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table ServiceHistory";
	public static final String ORDER_BY_JPQL = " ORDER BY serviceHistory.hisId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY ServiceHistory.hisId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.portal.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.liferay.portal.ext.model.ServiceHistory"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.portal.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.liferay.portal.ext.model.ServiceHistory"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.portal.util.PropsUtil.get(
				"value.object.column.bitmask.enabled.com.liferay.portal.ext.model.ServiceHistory"),
			true);
	public static long CLASSNAMEID_COLUMN_BITMASK = 1L;
	public static long CLASSPK_COLUMN_BITMASK = 2L;
	public static long HISID_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.portal.util.PropsUtil.get(
				"lock.expiration.time.com.liferay.portal.ext.model.ServiceHistory"));

	public ServiceHistoryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _hisId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setHisId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _hisId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ServiceHistory.class;
	}

	@Override
	public String getModelClassName() {
		return ServiceHistory.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("hisId", getHisId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("classNameId", getClassNameId());
		attributes.put("classPK", getClassPK());
		attributes.put("page", getPage());
		attributes.put("friendlyURL", getFriendlyURL());
		attributes.put("portletName", getPortletName());
		attributes.put("statusCode", getStatusCode());
		attributes.put("timeCost", getTimeCost());
		attributes.put("responseText", getResponseText());
		attributes.put("wrappedText", getWrappedText());
		attributes.put("debugInfo", getDebugInfo());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long hisId = (Long)attributes.get("hisId");

		if (hisId != null) {
			setHisId(hisId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long classNameId = (Long)attributes.get("classNameId");

		if (classNameId != null) {
			setClassNameId(classNameId);
		}

		Long classPK = (Long)attributes.get("classPK");

		if (classPK != null) {
			setClassPK(classPK);
		}

		String page = (String)attributes.get("page");

		if (page != null) {
			setPage(page);
		}

		String friendlyURL = (String)attributes.get("friendlyURL");

		if (friendlyURL != null) {
			setFriendlyURL(friendlyURL);
		}

		String portletName = (String)attributes.get("portletName");

		if (portletName != null) {
			setPortletName(portletName);
		}

		Integer statusCode = (Integer)attributes.get("statusCode");

		if (statusCode != null) {
			setStatusCode(statusCode);
		}

		Integer timeCost = (Integer)attributes.get("timeCost");

		if (timeCost != null) {
			setTimeCost(timeCost);
		}

		String responseText = (String)attributes.get("responseText");

		if (responseText != null) {
			setResponseText(responseText);
		}

		String wrappedText = (String)attributes.get("wrappedText");

		if (wrappedText != null) {
			setWrappedText(wrappedText);
		}

		String debugInfo = (String)attributes.get("debugInfo");

		if (debugInfo != null) {
			setDebugInfo(debugInfo);
		}
	}

	@Override
	public long getHisId() {
		return _hisId;
	}

	@Override
	public void setHisId(long hisId) {
		_hisId = hisId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public String getClassName() {
		if (getClassNameId() <= 0) {
			return StringPool.BLANK;
		}

		return PortalUtil.getClassName(getClassNameId());
	}

	@Override
	public void setClassName(String className) {
		long classNameId = 0;

		if (Validator.isNotNull(className)) {
			classNameId = PortalUtil.getClassNameId(className);
		}

		setClassNameId(classNameId);
	}

	@Override
	public long getClassNameId() {
		return _classNameId;
	}

	@Override
	public void setClassNameId(long classNameId) {
		_columnBitmask |= CLASSNAMEID_COLUMN_BITMASK;

		if (!_setOriginalClassNameId) {
			_setOriginalClassNameId = true;

			_originalClassNameId = _classNameId;
		}

		_classNameId = classNameId;
	}

	public long getOriginalClassNameId() {
		return _originalClassNameId;
	}

	@Override
	public long getClassPK() {
		return _classPK;
	}

	@Override
	public void setClassPK(long classPK) {
		_columnBitmask |= CLASSPK_COLUMN_BITMASK;

		if (!_setOriginalClassPK) {
			_setOriginalClassPK = true;

			_originalClassPK = _classPK;
		}

		_classPK = classPK;
	}

	public long getOriginalClassPK() {
		return _originalClassPK;
	}

	@Override
	public String getPage() {
		if (_page == null) {
			return StringPool.BLANK;
		}
		else {
			return _page;
		}
	}

	@Override
	public void setPage(String page) {
		_page = page;
	}

	@Override
	public String getFriendlyURL() {
		if (_friendlyURL == null) {
			return StringPool.BLANK;
		}
		else {
			return _friendlyURL;
		}
	}

	@Override
	public void setFriendlyURL(String friendlyURL) {
		_friendlyURL = friendlyURL;
	}

	@Override
	public String getPortletName() {
		if (_portletName == null) {
			return StringPool.BLANK;
		}
		else {
			return _portletName;
		}
	}

	@Override
	public void setPortletName(String portletName) {
		_portletName = portletName;
	}

	@Override
	public int getStatusCode() {
		return _statusCode;
	}

	@Override
	public void setStatusCode(int statusCode) {
		_statusCode = statusCode;
	}

	@Override
	public int getTimeCost() {
		return _timeCost;
	}

	@Override
	public void setTimeCost(int timeCost) {
		_timeCost = timeCost;
	}

	@Override
	public String getResponseText() {
		if (_responseText == null) {
			return StringPool.BLANK;
		}
		else {
			return _responseText;
		}
	}

	@Override
	public void setResponseText(String responseText) {
		_responseText = responseText;
	}

	@Override
	public String getWrappedText() {
		if (_wrappedText == null) {
			return StringPool.BLANK;
		}
		else {
			return _wrappedText;
		}
	}

	@Override
	public void setWrappedText(String wrappedText) {
		_wrappedText = wrappedText;
	}

	@Override
	public String getDebugInfo() {
		if (_debugInfo == null) {
			return StringPool.BLANK;
		}
		else {
			return _debugInfo;
		}
	}

	@Override
	public void setDebugInfo(String debugInfo) {
		_debugInfo = debugInfo;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			ServiceHistory.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ServiceHistory toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ServiceHistory)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ServiceHistoryImpl serviceHistoryImpl = new ServiceHistoryImpl();

		serviceHistoryImpl.setHisId(getHisId());
		serviceHistoryImpl.setUserId(getUserId());
		serviceHistoryImpl.setUserName(getUserName());
		serviceHistoryImpl.setCreateDate(getCreateDate());
		serviceHistoryImpl.setModifiedDate(getModifiedDate());
		serviceHistoryImpl.setClassNameId(getClassNameId());
		serviceHistoryImpl.setClassPK(getClassPK());
		serviceHistoryImpl.setPage(getPage());
		serviceHistoryImpl.setFriendlyURL(getFriendlyURL());
		serviceHistoryImpl.setPortletName(getPortletName());
		serviceHistoryImpl.setStatusCode(getStatusCode());
		serviceHistoryImpl.setTimeCost(getTimeCost());
		serviceHistoryImpl.setResponseText(getResponseText());
		serviceHistoryImpl.setWrappedText(getWrappedText());
		serviceHistoryImpl.setDebugInfo(getDebugInfo());

		serviceHistoryImpl.resetOriginalValues();

		return serviceHistoryImpl;
	}

	@Override
	public int compareTo(ServiceHistory serviceHistory) {
		long primaryKey = serviceHistory.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ServiceHistory)) {
			return false;
		}

		ServiceHistory serviceHistory = (ServiceHistory)obj;

		long primaryKey = serviceHistory.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ServiceHistoryModelImpl serviceHistoryModelImpl = this;

		serviceHistoryModelImpl._originalClassNameId = serviceHistoryModelImpl._classNameId;

		serviceHistoryModelImpl._setOriginalClassNameId = false;

		serviceHistoryModelImpl._originalClassPK = serviceHistoryModelImpl._classPK;

		serviceHistoryModelImpl._setOriginalClassPK = false;

		serviceHistoryModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ServiceHistory> toCacheModel() {
		ServiceHistoryCacheModel serviceHistoryCacheModel = new ServiceHistoryCacheModel();

		serviceHistoryCacheModel.hisId = getHisId();

		serviceHistoryCacheModel.userId = getUserId();

		serviceHistoryCacheModel.userName = getUserName();

		String userName = serviceHistoryCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			serviceHistoryCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			serviceHistoryCacheModel.createDate = createDate.getTime();
		}
		else {
			serviceHistoryCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			serviceHistoryCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			serviceHistoryCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		serviceHistoryCacheModel.classNameId = getClassNameId();

		serviceHistoryCacheModel.classPK = getClassPK();

		serviceHistoryCacheModel.page = getPage();

		String page = serviceHistoryCacheModel.page;

		if ((page != null) && (page.length() == 0)) {
			serviceHistoryCacheModel.page = null;
		}

		serviceHistoryCacheModel.friendlyURL = getFriendlyURL();

		String friendlyURL = serviceHistoryCacheModel.friendlyURL;

		if ((friendlyURL != null) && (friendlyURL.length() == 0)) {
			serviceHistoryCacheModel.friendlyURL = null;
		}

		serviceHistoryCacheModel.portletName = getPortletName();

		String portletName = serviceHistoryCacheModel.portletName;

		if ((portletName != null) && (portletName.length() == 0)) {
			serviceHistoryCacheModel.portletName = null;
		}

		serviceHistoryCacheModel.statusCode = getStatusCode();

		serviceHistoryCacheModel.timeCost = getTimeCost();

		serviceHistoryCacheModel.responseText = getResponseText();

		String responseText = serviceHistoryCacheModel.responseText;

		if ((responseText != null) && (responseText.length() == 0)) {
			serviceHistoryCacheModel.responseText = null;
		}

		serviceHistoryCacheModel.wrappedText = getWrappedText();

		String wrappedText = serviceHistoryCacheModel.wrappedText;

		if ((wrappedText != null) && (wrappedText.length() == 0)) {
			serviceHistoryCacheModel.wrappedText = null;
		}

		serviceHistoryCacheModel.debugInfo = getDebugInfo();

		String debugInfo = serviceHistoryCacheModel.debugInfo;

		if ((debugInfo != null) && (debugInfo.length() == 0)) {
			serviceHistoryCacheModel.debugInfo = null;
		}

		return serviceHistoryCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(31);

		sb.append("{hisId=");
		sb.append(getHisId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", classNameId=");
		sb.append(getClassNameId());
		sb.append(", classPK=");
		sb.append(getClassPK());
		sb.append(", page=");
		sb.append(getPage());
		sb.append(", friendlyURL=");
		sb.append(getFriendlyURL());
		sb.append(", portletName=");
		sb.append(getPortletName());
		sb.append(", statusCode=");
		sb.append(getStatusCode());
		sb.append(", timeCost=");
		sb.append(getTimeCost());
		sb.append(", responseText=");
		sb.append(getResponseText());
		sb.append(", wrappedText=");
		sb.append(getWrappedText());
		sb.append(", debugInfo=");
		sb.append(getDebugInfo());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(49);

		sb.append("<model><model-name>");
		sb.append("com.liferay.portal.ext.model.ServiceHistory");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>hisId</column-name><column-value><![CDATA[");
		sb.append(getHisId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>classNameId</column-name><column-value><![CDATA[");
		sb.append(getClassNameId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>classPK</column-name><column-value><![CDATA[");
		sb.append(getClassPK());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>page</column-name><column-value><![CDATA[");
		sb.append(getPage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>friendlyURL</column-name><column-value><![CDATA[");
		sb.append(getFriendlyURL());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>portletName</column-name><column-value><![CDATA[");
		sb.append(getPortletName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusCode</column-name><column-value><![CDATA[");
		sb.append(getStatusCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>timeCost</column-name><column-value><![CDATA[");
		sb.append(getTimeCost());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>responseText</column-name><column-value><![CDATA[");
		sb.append(getResponseText());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>wrappedText</column-name><column-value><![CDATA[");
		sb.append(getWrappedText());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>debugInfo</column-name><column-value><![CDATA[");
		sb.append(getDebugInfo());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ServiceHistory.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			ServiceHistory.class
		};
	private long _hisId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private long _classNameId;
	private long _originalClassNameId;
	private boolean _setOriginalClassNameId;
	private long _classPK;
	private long _originalClassPK;
	private boolean _setOriginalClassPK;
	private String _page;
	private String _friendlyURL;
	private String _portletName;
	private int _statusCode;
	private int _timeCost;
	private String _responseText;
	private String _wrappedText;
	private String _debugInfo;
	private long _columnBitmask;
	private ServiceHistory _escapedModel;
}