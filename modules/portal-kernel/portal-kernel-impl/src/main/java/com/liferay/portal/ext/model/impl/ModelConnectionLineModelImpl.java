/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.portal.ext.model.impl;

import com.liferay.portal.ext.model.ModelConnectionLine;
import com.liferay.portal.ext.model.ModelConnectionLineModel;
import com.liferay.portal.ext.model.ModelConnectionLineSoap;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ModelConnectionLine service. Represents a row in the &quot;ModelConnectionLine&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.portal.ext.model.ModelConnectionLineModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ModelConnectionLineImpl}.
 * </p>
 *
 * @author Jeff Qian
 * @see ModelConnectionLineImpl
 * @see com.liferay.portal.ext.model.ModelConnectionLine
 * @see com.liferay.portal.ext.model.ModelConnectionLineModel
 * @generated
 */
@JSON(strict = true)
public class ModelConnectionLineModelImpl extends BaseModelImpl<ModelConnectionLine>
	implements ModelConnectionLineModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a model connection line model instance should use the {@link com.liferay.portal.ext.model.ModelConnectionLine} interface instead.
	 */
	public static final String TABLE_NAME = "ModelConnectionLine";
	public static final Object[][] TABLE_COLUMNS = {
			{ "lineId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "lineGroupId", Types.BIGINT },
			{ "classNameId", Types.BIGINT },
			{ "classPK", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table ModelConnectionLine (lineId LONG not null primary key,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,lineGroupId LONG,classNameId LONG,classPK LONG)";
	public static final String TABLE_SQL_DROP = "drop table ModelConnectionLine";
	public static final String ORDER_BY_JPQL = " ORDER BY modelConnectionLine.lineId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY ModelConnectionLine.lineId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.portal.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.liferay.portal.ext.model.ModelConnectionLine"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.portal.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.liferay.portal.ext.model.ModelConnectionLine"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.portal.util.PropsUtil.get(
				"value.object.column.bitmask.enabled.com.liferay.portal.ext.model.ModelConnectionLine"),
			true);
	public static long CLASSNAMEID_COLUMN_BITMASK = 1L;
	public static long CLASSPK_COLUMN_BITMASK = 2L;
	public static long LINEGROUPID_COLUMN_BITMASK = 4L;
	public static long LINEID_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ModelConnectionLine toModel(ModelConnectionLineSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ModelConnectionLine model = new ModelConnectionLineImpl();

		model.setLineId(soapModel.getLineId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setLineGroupId(soapModel.getLineGroupId());
		model.setClassNameId(soapModel.getClassNameId());
		model.setClassPK(soapModel.getClassPK());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ModelConnectionLine> toModels(
		ModelConnectionLineSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<ModelConnectionLine> models = new ArrayList<ModelConnectionLine>(soapModels.length);

		for (ModelConnectionLineSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.portal.util.PropsUtil.get(
				"lock.expiration.time.com.liferay.portal.ext.model.ModelConnectionLine"));

	public ModelConnectionLineModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _lineId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setLineId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _lineId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ModelConnectionLine.class;
	}

	@Override
	public String getModelClassName() {
		return ModelConnectionLine.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("lineId", getLineId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("lineGroupId", getLineGroupId());
		attributes.put("classNameId", getClassNameId());
		attributes.put("classPK", getClassPK());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long lineId = (Long)attributes.get("lineId");

		if (lineId != null) {
			setLineId(lineId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long lineGroupId = (Long)attributes.get("lineGroupId");

		if (lineGroupId != null) {
			setLineGroupId(lineGroupId);
		}

		Long classNameId = (Long)attributes.get("classNameId");

		if (classNameId != null) {
			setClassNameId(classNameId);
		}

		Long classPK = (Long)attributes.get("classPK");

		if (classPK != null) {
			setClassPK(classPK);
		}
	}

	@JSON
	@Override
	public long getLineId() {
		return _lineId;
	}

	@Override
	public void setLineId(long lineId) {
		_lineId = lineId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getLineGroupId() {
		return _lineGroupId;
	}

	@Override
	public void setLineGroupId(long lineGroupId) {
		_columnBitmask |= LINEGROUPID_COLUMN_BITMASK;

		if (!_setOriginalLineGroupId) {
			_setOriginalLineGroupId = true;

			_originalLineGroupId = _lineGroupId;
		}

		_lineGroupId = lineGroupId;
	}

	public long getOriginalLineGroupId() {
		return _originalLineGroupId;
	}

	@Override
	public String getClassName() {
		if (getClassNameId() <= 0) {
			return StringPool.BLANK;
		}

		return PortalUtil.getClassName(getClassNameId());
	}

	@Override
	public void setClassName(String className) {
		long classNameId = 0;

		if (Validator.isNotNull(className)) {
			classNameId = PortalUtil.getClassNameId(className);
		}

		setClassNameId(classNameId);
	}

	@JSON
	@Override
	public long getClassNameId() {
		return _classNameId;
	}

	@Override
	public void setClassNameId(long classNameId) {
		_columnBitmask |= CLASSNAMEID_COLUMN_BITMASK;

		if (!_setOriginalClassNameId) {
			_setOriginalClassNameId = true;

			_originalClassNameId = _classNameId;
		}

		_classNameId = classNameId;
	}

	public long getOriginalClassNameId() {
		return _originalClassNameId;
	}

	@JSON
	@Override
	public long getClassPK() {
		return _classPK;
	}

	@Override
	public void setClassPK(long classPK) {
		_columnBitmask |= CLASSPK_COLUMN_BITMASK;

		if (!_setOriginalClassPK) {
			_setOriginalClassPK = true;

			_originalClassPK = _classPK;
		}

		_classPK = classPK;
	}

	public long getOriginalClassPK() {
		return _originalClassPK;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			ModelConnectionLine.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ModelConnectionLine toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ModelConnectionLine)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ModelConnectionLineImpl modelConnectionLineImpl = new ModelConnectionLineImpl();

		modelConnectionLineImpl.setLineId(getLineId());
		modelConnectionLineImpl.setUserId(getUserId());
		modelConnectionLineImpl.setUserName(getUserName());
		modelConnectionLineImpl.setCreateDate(getCreateDate());
		modelConnectionLineImpl.setModifiedDate(getModifiedDate());
		modelConnectionLineImpl.setLineGroupId(getLineGroupId());
		modelConnectionLineImpl.setClassNameId(getClassNameId());
		modelConnectionLineImpl.setClassPK(getClassPK());

		modelConnectionLineImpl.resetOriginalValues();

		return modelConnectionLineImpl;
	}

	@Override
	public int compareTo(ModelConnectionLine modelConnectionLine) {
		long primaryKey = modelConnectionLine.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ModelConnectionLine)) {
			return false;
		}

		ModelConnectionLine modelConnectionLine = (ModelConnectionLine)obj;

		long primaryKey = modelConnectionLine.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ModelConnectionLineModelImpl modelConnectionLineModelImpl = this;

		modelConnectionLineModelImpl._originalLineGroupId = modelConnectionLineModelImpl._lineGroupId;

		modelConnectionLineModelImpl._setOriginalLineGroupId = false;

		modelConnectionLineModelImpl._originalClassNameId = modelConnectionLineModelImpl._classNameId;

		modelConnectionLineModelImpl._setOriginalClassNameId = false;

		modelConnectionLineModelImpl._originalClassPK = modelConnectionLineModelImpl._classPK;

		modelConnectionLineModelImpl._setOriginalClassPK = false;

		modelConnectionLineModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ModelConnectionLine> toCacheModel() {
		ModelConnectionLineCacheModel modelConnectionLineCacheModel = new ModelConnectionLineCacheModel();

		modelConnectionLineCacheModel.lineId = getLineId();

		modelConnectionLineCacheModel.userId = getUserId();

		modelConnectionLineCacheModel.userName = getUserName();

		String userName = modelConnectionLineCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			modelConnectionLineCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			modelConnectionLineCacheModel.createDate = createDate.getTime();
		}
		else {
			modelConnectionLineCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			modelConnectionLineCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			modelConnectionLineCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		modelConnectionLineCacheModel.lineGroupId = getLineGroupId();

		modelConnectionLineCacheModel.classNameId = getClassNameId();

		modelConnectionLineCacheModel.classPK = getClassPK();

		return modelConnectionLineCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{lineId=");
		sb.append(getLineId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", lineGroupId=");
		sb.append(getLineGroupId());
		sb.append(", classNameId=");
		sb.append(getClassNameId());
		sb.append(", classPK=");
		sb.append(getClassPK());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("com.liferay.portal.ext.model.ModelConnectionLine");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>lineId</column-name><column-value><![CDATA[");
		sb.append(getLineId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lineGroupId</column-name><column-value><![CDATA[");
		sb.append(getLineGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>classNameId</column-name><column-value><![CDATA[");
		sb.append(getClassNameId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>classPK</column-name><column-value><![CDATA[");
		sb.append(getClassPK());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ModelConnectionLine.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			ModelConnectionLine.class
		};
	private long _lineId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private long _lineGroupId;
	private long _originalLineGroupId;
	private boolean _setOriginalLineGroupId;
	private long _classNameId;
	private long _originalClassNameId;
	private boolean _setOriginalClassNameId;
	private long _classPK;
	private long _originalClassPK;
	private boolean _setOriginalClassPK;
	private long _columnBitmask;
	private ModelConnectionLine _escapedModel;
}