package com.liferay.portal.ext.service.base;

import com.liferay.portal.ext.model.FilterScope;
import com.liferay.portal.ext.service.FilterScopeLocalService;
import com.liferay.portal.ext.service.persistence.FilterGroupPersistence;
import com.liferay.portal.ext.service.persistence.FilterScopePersistence;
import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.service.persistence.UserFinder;
import com.liferay.portal.service.persistence.UserPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the filter scope local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.liferay.portal.ext.service.impl.FilterScopeLocalServiceImpl}.
 * </p>
 *
 * @author Jeff Qian
 * @see com.liferay.portal.ext.service.impl.FilterScopeLocalServiceImpl
 * @see com.liferay.portal.ext.service.FilterScopeLocalServiceUtil
 * @generated
 */
public abstract class FilterScopeLocalServiceBaseImpl
    extends BaseLocalServiceImpl implements FilterScopeLocalService,
        IdentifiableBean {
    @BeanReference(type = com.liferay.portal.ext.service.FilterGroupLocalService.class)
    protected com.liferay.portal.ext.service.FilterGroupLocalService filterGroupLocalService;
    @BeanReference(type = FilterGroupPersistence.class)
    protected FilterGroupPersistence filterGroupPersistence;
    @BeanReference(type = com.liferay.portal.ext.service.FilterScopeLocalService.class)
    protected com.liferay.portal.ext.service.FilterScopeLocalService filterScopeLocalService;
    @BeanReference(type = FilterScopePersistence.class)
    protected FilterScopePersistence filterScopePersistence;
    @BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
    protected com.liferay.counter.service.CounterLocalService counterLocalService;
    @BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
    protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
    @BeanReference(type = com.liferay.portal.service.UserLocalService.class)
    protected com.liferay.portal.service.UserLocalService userLocalService;
    @BeanReference(type = com.liferay.portal.service.UserService.class)
    protected com.liferay.portal.service.UserService userService;
    @BeanReference(type = UserPersistence.class)
    protected UserPersistence userPersistence;
    @BeanReference(type = UserFinder.class)
    protected UserFinder userFinder;
    @BeanReference(type = PersistedModelLocalServiceRegistry.class)
    protected PersistedModelLocalServiceRegistry persistedModelLocalServiceRegistry;
    private String _beanIdentifier;

    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. Always use {@link com.liferay.portal.ext.service.FilterScopeLocalServiceUtil} to access the filter scope local service.
     */

    /**
     * Adds the filter scope to the database. Also notifies the appropriate model listeners.
     *
     * @param filterScope the filter scope
     * @return the filter scope that was added
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    @Override
    public FilterScope addFilterScope(FilterScope filterScope)
        throws SystemException {
        filterScope.setNew(true);

        return filterScopePersistence.update(filterScope);
    }

    /**
     * Creates a new filter scope with the primary key. Does not add the filter scope to the database.
     *
     * @param filterScopeId the primary key for the new filter scope
     * @return the new filter scope
     */
    @Override
    public FilterScope createFilterScope(long filterScopeId) {
        return filterScopePersistence.create(filterScopeId);
    }

    /**
     * Deletes the filter scope with the primary key from the database. Also notifies the appropriate model listeners.
     *
     * @param filterScopeId the primary key of the filter scope
     * @return the filter scope that was removed
     * @throws PortalException if a filter scope with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.DELETE)
    @Override
    public FilterScope deleteFilterScope(long filterScopeId)
        throws PortalException, SystemException {
        return filterScopePersistence.remove(filterScopeId);
    }

    /**
     * Deletes the filter scope from the database. Also notifies the appropriate model listeners.
     *
     * @param filterScope the filter scope
     * @return the filter scope that was removed
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.DELETE)
    @Override
    public FilterScope deleteFilterScope(FilterScope filterScope)
        throws SystemException {
        return filterScopePersistence.remove(filterScope);
    }

    @Override
    public DynamicQuery dynamicQuery() {
        Class<?> clazz = getClass();

        return DynamicQueryFactoryUtil.forClass(FilterScope.class,
            clazz.getClassLoader());
    }

    /**
     * Performs a dynamic query on the database and returns the matching rows.
     *
     * @param dynamicQuery the dynamic query
     * @return the matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery)
        throws SystemException {
        return filterScopePersistence.findWithDynamicQuery(dynamicQuery);
    }

    /**
     * Performs a dynamic query on the database and returns a range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.portal.ext.model.impl.FilterScopeModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @return the range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
        throws SystemException {
        return filterScopePersistence.findWithDynamicQuery(dynamicQuery, start,
            end);
    }

    /**
     * Performs a dynamic query on the database and returns an ordered range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.portal.ext.model.impl.FilterScopeModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
     * @return the ordered range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
        OrderByComparator orderByComparator) throws SystemException {
        return filterScopePersistence.findWithDynamicQuery(dynamicQuery, start,
            end, orderByComparator);
    }

    /**
     * Returns the number of rows that match the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @return the number of rows that match the dynamic query
     * @throws SystemException if a system exception occurred
     */
    @Override
    public long dynamicQueryCount(DynamicQuery dynamicQuery)
        throws SystemException {
        return filterScopePersistence.countWithDynamicQuery(dynamicQuery);
    }

    /**
     * Returns the number of rows that match the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @param projection the projection to apply to the query
     * @return the number of rows that match the dynamic query
     * @throws SystemException if a system exception occurred
     */
    @Override
    public long dynamicQueryCount(DynamicQuery dynamicQuery,
        Projection projection) throws SystemException {
        return filterScopePersistence.countWithDynamicQuery(dynamicQuery,
            projection);
    }

    @Override
    public FilterScope fetchFilterScope(long filterScopeId)
        throws SystemException {
        return filterScopePersistence.fetchByPrimaryKey(filterScopeId);
    }

    /**
     * Returns the filter scope with the primary key.
     *
     * @param filterScopeId the primary key of the filter scope
     * @return the filter scope
     * @throws PortalException if a filter scope with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public FilterScope getFilterScope(long filterScopeId)
        throws PortalException, SystemException {
        return filterScopePersistence.findByPrimaryKey(filterScopeId);
    }

    @Override
    public PersistedModel getPersistedModel(Serializable primaryKeyObj)
        throws PortalException, SystemException {
        return filterScopePersistence.findByPrimaryKey(primaryKeyObj);
    }

    /**
     * Returns a range of all the filter scopes.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.portal.ext.model.impl.FilterScopeModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param start the lower bound of the range of filter scopes
     * @param end the upper bound of the range of filter scopes (not inclusive)
     * @return the range of filter scopes
     * @throws SystemException if a system exception occurred
     */
    @Override
    public List<FilterScope> getFilterScopes(int start, int end)
        throws SystemException {
        return filterScopePersistence.findAll(start, end);
    }

    /**
     * Returns the number of filter scopes.
     *
     * @return the number of filter scopes
     * @throws SystemException if a system exception occurred
     */
    @Override
    public int getFilterScopesCount() throws SystemException {
        return filterScopePersistence.countAll();
    }

    /**
     * Updates the filter scope in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
     *
     * @param filterScope the filter scope
     * @return the filter scope that was updated
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    @Override
    public FilterScope updateFilterScope(FilterScope filterScope)
        throws SystemException {
        return filterScopePersistence.update(filterScope);
    }

    /**
     * Returns the filter group local service.
     *
     * @return the filter group local service
     */
    public com.liferay.portal.ext.service.FilterGroupLocalService getFilterGroupLocalService() {
        return filterGroupLocalService;
    }

    /**
     * Sets the filter group local service.
     *
     * @param filterGroupLocalService the filter group local service
     */
    public void setFilterGroupLocalService(
        com.liferay.portal.ext.service.FilterGroupLocalService filterGroupLocalService) {
        this.filterGroupLocalService = filterGroupLocalService;
    }

    /**
     * Returns the filter group persistence.
     *
     * @return the filter group persistence
     */
    public FilterGroupPersistence getFilterGroupPersistence() {
        return filterGroupPersistence;
    }

    /**
     * Sets the filter group persistence.
     *
     * @param filterGroupPersistence the filter group persistence
     */
    public void setFilterGroupPersistence(
        FilterGroupPersistence filterGroupPersistence) {
        this.filterGroupPersistence = filterGroupPersistence;
    }

    /**
     * Returns the filter scope local service.
     *
     * @return the filter scope local service
     */
    public com.liferay.portal.ext.service.FilterScopeLocalService getFilterScopeLocalService() {
        return filterScopeLocalService;
    }

    /**
     * Sets the filter scope local service.
     *
     * @param filterScopeLocalService the filter scope local service
     */
    public void setFilterScopeLocalService(
        com.liferay.portal.ext.service.FilterScopeLocalService filterScopeLocalService) {
        this.filterScopeLocalService = filterScopeLocalService;
    }

    /**
     * Returns the filter scope persistence.
     *
     * @return the filter scope persistence
     */
    public FilterScopePersistence getFilterScopePersistence() {
        return filterScopePersistence;
    }

    /**
     * Sets the filter scope persistence.
     *
     * @param filterScopePersistence the filter scope persistence
     */
    public void setFilterScopePersistence(
        FilterScopePersistence filterScopePersistence) {
        this.filterScopePersistence = filterScopePersistence;
    }

    /**
     * Returns the counter local service.
     *
     * @return the counter local service
     */
    public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
        return counterLocalService;
    }

    /**
     * Sets the counter local service.
     *
     * @param counterLocalService the counter local service
     */
    public void setCounterLocalService(
        com.liferay.counter.service.CounterLocalService counterLocalService) {
        this.counterLocalService = counterLocalService;
    }

    /**
     * Returns the resource local service.
     *
     * @return the resource local service
     */
    public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
        return resourceLocalService;
    }

    /**
     * Sets the resource local service.
     *
     * @param resourceLocalService the resource local service
     */
    public void setResourceLocalService(
        com.liferay.portal.service.ResourceLocalService resourceLocalService) {
        this.resourceLocalService = resourceLocalService;
    }

    /**
     * Returns the user local service.
     *
     * @return the user local service
     */
    public com.liferay.portal.service.UserLocalService getUserLocalService() {
        return userLocalService;
    }

    /**
     * Sets the user local service.
     *
     * @param userLocalService the user local service
     */
    public void setUserLocalService(
        com.liferay.portal.service.UserLocalService userLocalService) {
        this.userLocalService = userLocalService;
    }

    /**
     * Returns the user remote service.
     *
     * @return the user remote service
     */
    public com.liferay.portal.service.UserService getUserService() {
        return userService;
    }

    /**
     * Sets the user remote service.
     *
     * @param userService the user remote service
     */
    public void setUserService(
        com.liferay.portal.service.UserService userService) {
        this.userService = userService;
    }

    /**
     * Returns the user persistence.
     *
     * @return the user persistence
     */
    public UserPersistence getUserPersistence() {
        return userPersistence;
    }

    /**
     * Sets the user persistence.
     *
     * @param userPersistence the user persistence
     */
    public void setUserPersistence(UserPersistence userPersistence) {
        this.userPersistence = userPersistence;
    }

    /**
     * Returns the user finder.
     *
     * @return the user finder
     */
    public UserFinder getUserFinder() {
        return userFinder;
    }

    /**
     * Sets the user finder.
     *
     * @param userFinder the user finder
     */
    public void setUserFinder(UserFinder userFinder) {
        this.userFinder = userFinder;
    }

    public void afterPropertiesSet() {
        persistedModelLocalServiceRegistry.register("com.liferay.portal.ext.model.FilterScope",
            filterScopeLocalService);
    }

    public void destroy() {
        persistedModelLocalServiceRegistry.unregister(
            "com.liferay.portal.ext.model.FilterScope");
    }

    /**
     * Returns the Spring bean ID for this bean.
     *
     * @return the Spring bean ID for this bean
     */
    @Override
    public String getBeanIdentifier() {
        return _beanIdentifier;
    }

    /**
     * Sets the Spring bean ID for this bean.
     *
     * @param beanIdentifier the Spring bean ID for this bean
     */
    @Override
    public void setBeanIdentifier(String beanIdentifier) {
        _beanIdentifier = beanIdentifier;
    }

    protected Class<?> getModelClass() {
        return FilterScope.class;
    }

    protected String getModelClassName() {
        return FilterScope.class.getName();
    }

    /**
     * Performs an SQL query.
     *
     * @param sql the sql query
     */
    protected void runSQL(String sql) throws SystemException {
        try {
            DataSource dataSource = filterScopePersistence.getDataSource();

            SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
                    sql, new int[0]);

            sqlUpdate.update();
        } catch (Exception e) {
            throw new SystemException(e);
        }
    }
}
