/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.portal.ext.model.impl;

import com.liferay.portal.ext.model.ServiceAuthorization;
import com.liferay.portal.ext.model.ServiceAuthorizationModel;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ServiceAuthorization service. Represents a row in the &quot;ServiceAuthorization&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.portal.ext.model.ServiceAuthorizationModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ServiceAuthorizationImpl}.
 * </p>
 *
 * @author Jeff Qian
 * @see ServiceAuthorizationImpl
 * @see com.liferay.portal.ext.model.ServiceAuthorization
 * @see com.liferay.portal.ext.model.ServiceAuthorizationModel
 * @generated
 */
public class ServiceAuthorizationModelImpl extends BaseModelImpl<ServiceAuthorization>
	implements ServiceAuthorizationModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a service authorization model instance should use the {@link com.liferay.portal.ext.model.ServiceAuthorization} interface instead.
	 */
	public static final String TABLE_NAME = "ServiceAuthorization";
	public static final Object[][] TABLE_COLUMNS = {
			{ "authId", Types.BIGINT },
			{ "code_", Types.VARCHAR },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "classNameId", Types.BIGINT },
			{ "classPK", Types.BIGINT },
			{ "type_", Types.VARCHAR },
			{ "template", Types.CLOB }
		};
	public static final String TABLE_SQL_CREATE = "create table ServiceAuthorization (authId LONG not null primary key,code_ VARCHAR(75) null,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,classNameId LONG,classPK LONG,type_ VARCHAR(75) null,template TEXT null)";
	public static final String TABLE_SQL_DROP = "drop table ServiceAuthorization";
	public static final String ORDER_BY_JPQL = " ORDER BY serviceAuthorization.authId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY ServiceAuthorization.authId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.portal.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.liferay.portal.ext.model.ServiceAuthorization"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.portal.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.liferay.portal.ext.model.ServiceAuthorization"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.portal.util.PropsUtil.get(
				"value.object.column.bitmask.enabled.com.liferay.portal.ext.model.ServiceAuthorization"),
			true);
	public static long CODE_COLUMN_BITMASK = 1L;
	public static long AUTHID_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.portal.util.PropsUtil.get(
				"lock.expiration.time.com.liferay.portal.ext.model.ServiceAuthorization"));

	public ServiceAuthorizationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _authId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAuthId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _authId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ServiceAuthorization.class;
	}

	@Override
	public String getModelClassName() {
		return ServiceAuthorization.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("authId", getAuthId());
		attributes.put("code", getCode());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("classNameId", getClassNameId());
		attributes.put("classPK", getClassPK());
		attributes.put("type", getType());
		attributes.put("template", getTemplate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long authId = (Long)attributes.get("authId");

		if (authId != null) {
			setAuthId(authId);
		}

		String code = (String)attributes.get("code");

		if (code != null) {
			setCode(code);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long classNameId = (Long)attributes.get("classNameId");

		if (classNameId != null) {
			setClassNameId(classNameId);
		}

		Long classPK = (Long)attributes.get("classPK");

		if (classPK != null) {
			setClassPK(classPK);
		}

		String type = (String)attributes.get("type");

		if (type != null) {
			setType(type);
		}

		String template = (String)attributes.get("template");

		if (template != null) {
			setTemplate(template);
		}
	}

	@Override
	public long getAuthId() {
		return _authId;
	}

	@Override
	public void setAuthId(long authId) {
		_authId = authId;
	}

	@Override
	public String getCode() {
		if (_code == null) {
			return StringPool.BLANK;
		}
		else {
			return _code;
		}
	}

	@Override
	public void setCode(String code) {
		_columnBitmask |= CODE_COLUMN_BITMASK;

		if (_originalCode == null) {
			_originalCode = _code;
		}

		_code = code;
	}

	public String getOriginalCode() {
		return GetterUtil.getString(_originalCode);
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public String getClassName() {
		if (getClassNameId() <= 0) {
			return StringPool.BLANK;
		}

		return PortalUtil.getClassName(getClassNameId());
	}

	@Override
	public void setClassName(String className) {
		long classNameId = 0;

		if (Validator.isNotNull(className)) {
			classNameId = PortalUtil.getClassNameId(className);
		}

		setClassNameId(classNameId);
	}

	@Override
	public long getClassNameId() {
		return _classNameId;
	}

	@Override
	public void setClassNameId(long classNameId) {
		_classNameId = classNameId;
	}

	@Override
	public long getClassPK() {
		return _classPK;
	}

	@Override
	public void setClassPK(long classPK) {
		_classPK = classPK;
	}

	@Override
	public String getType() {
		if (_type == null) {
			return StringPool.BLANK;
		}
		else {
			return _type;
		}
	}

	@Override
	public void setType(String type) {
		_type = type;
	}

	@Override
	public String getTemplate() {
		if (_template == null) {
			return StringPool.BLANK;
		}
		else {
			return _template;
		}
	}

	@Override
	public void setTemplate(String template) {
		_template = template;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			ServiceAuthorization.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ServiceAuthorization toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ServiceAuthorization)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ServiceAuthorizationImpl serviceAuthorizationImpl = new ServiceAuthorizationImpl();

		serviceAuthorizationImpl.setAuthId(getAuthId());
		serviceAuthorizationImpl.setCode(getCode());
		serviceAuthorizationImpl.setUserId(getUserId());
		serviceAuthorizationImpl.setUserName(getUserName());
		serviceAuthorizationImpl.setCreateDate(getCreateDate());
		serviceAuthorizationImpl.setModifiedDate(getModifiedDate());
		serviceAuthorizationImpl.setClassNameId(getClassNameId());
		serviceAuthorizationImpl.setClassPK(getClassPK());
		serviceAuthorizationImpl.setType(getType());
		serviceAuthorizationImpl.setTemplate(getTemplate());

		serviceAuthorizationImpl.resetOriginalValues();

		return serviceAuthorizationImpl;
	}

	@Override
	public int compareTo(ServiceAuthorization serviceAuthorization) {
		long primaryKey = serviceAuthorization.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ServiceAuthorization)) {
			return false;
		}

		ServiceAuthorization serviceAuthorization = (ServiceAuthorization)obj;

		long primaryKey = serviceAuthorization.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ServiceAuthorizationModelImpl serviceAuthorizationModelImpl = this;

		serviceAuthorizationModelImpl._originalCode = serviceAuthorizationModelImpl._code;

		serviceAuthorizationModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ServiceAuthorization> toCacheModel() {
		ServiceAuthorizationCacheModel serviceAuthorizationCacheModel = new ServiceAuthorizationCacheModel();

		serviceAuthorizationCacheModel.authId = getAuthId();

		serviceAuthorizationCacheModel.code = getCode();

		String code = serviceAuthorizationCacheModel.code;

		if ((code != null) && (code.length() == 0)) {
			serviceAuthorizationCacheModel.code = null;
		}

		serviceAuthorizationCacheModel.userId = getUserId();

		serviceAuthorizationCacheModel.userName = getUserName();

		String userName = serviceAuthorizationCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			serviceAuthorizationCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			serviceAuthorizationCacheModel.createDate = createDate.getTime();
		}
		else {
			serviceAuthorizationCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			serviceAuthorizationCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			serviceAuthorizationCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		serviceAuthorizationCacheModel.classNameId = getClassNameId();

		serviceAuthorizationCacheModel.classPK = getClassPK();

		serviceAuthorizationCacheModel.type = getType();

		String type = serviceAuthorizationCacheModel.type;

		if ((type != null) && (type.length() == 0)) {
			serviceAuthorizationCacheModel.type = null;
		}

		serviceAuthorizationCacheModel.template = getTemplate();

		String template = serviceAuthorizationCacheModel.template;

		if ((template != null) && (template.length() == 0)) {
			serviceAuthorizationCacheModel.template = null;
		}

		return serviceAuthorizationCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(21);

		sb.append("{authId=");
		sb.append(getAuthId());
		sb.append(", code=");
		sb.append(getCode());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", classNameId=");
		sb.append(getClassNameId());
		sb.append(", classPK=");
		sb.append(getClassPK());
		sb.append(", type=");
		sb.append(getType());
		sb.append(", template=");
		sb.append(getTemplate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(34);

		sb.append("<model><model-name>");
		sb.append("com.liferay.portal.ext.model.ServiceAuthorization");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>authId</column-name><column-value><![CDATA[");
		sb.append(getAuthId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>code</column-name><column-value><![CDATA[");
		sb.append(getCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>classNameId</column-name><column-value><![CDATA[");
		sb.append(getClassNameId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>classPK</column-name><column-value><![CDATA[");
		sb.append(getClassPK());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>type</column-name><column-value><![CDATA[");
		sb.append(getType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>template</column-name><column-value><![CDATA[");
		sb.append(getTemplate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ServiceAuthorization.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			ServiceAuthorization.class
		};
	private long _authId;
	private String _code;
	private String _originalCode;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private long _classNameId;
	private long _classPK;
	private String _type;
	private String _template;
	private long _columnBitmask;
	private ServiceAuthorization _escapedModel;
}