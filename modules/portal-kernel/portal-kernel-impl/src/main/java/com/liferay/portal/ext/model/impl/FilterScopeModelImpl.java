package com.liferay.portal.ext.model.impl;

import com.liferay.portal.ext.model.FilterScope;
import com.liferay.portal.ext.model.FilterScopeModel;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the FilterScope service. Represents a row in the &quot;FilterScope&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.portal.ext.model.FilterScopeModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FilterScopeImpl}.
 * </p>
 *
 * @author Jeff Qian
 * @see FilterScopeImpl
 * @see com.liferay.portal.ext.model.FilterScope
 * @see com.liferay.portal.ext.model.FilterScopeModel
 * @generated
 */
public class FilterScopeModelImpl extends BaseModelImpl<FilterScope>
    implements FilterScopeModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a filter scope model instance should use the {@link com.liferay.portal.ext.model.FilterScope} interface instead.
     */
    public static final String TABLE_NAME = "FilterScope";
    public static final Object[][] TABLE_COLUMNS = {
            { "filterScopeId", Types.BIGINT },
            { "filterName", Types.VARCHAR },
            { "className", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table FilterScope (filterScopeId LONG not null primary key,filterName VARCHAR(255) null,className VARCHAR(255) null)";
    public static final String TABLE_SQL_DROP = "drop table FilterScope";
    public static final String ORDER_BY_JPQL = " ORDER BY filterScope.className DESC";
    public static final String ORDER_BY_SQL = " ORDER BY FilterScope.className DESC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.portal.util.PropsUtil.get(
                "value.object.entity.cache.enabled.com.liferay.portal.ext.model.FilterScope"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.portal.util.PropsUtil.get(
                "value.object.finder.cache.enabled.com.liferay.portal.ext.model.FilterScope"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.portal.util.PropsUtil.get(
                "value.object.column.bitmask.enabled.com.liferay.portal.ext.model.FilterScope"),
            true);
    public static long CLASSNAME_COLUMN_BITMASK = 1L;
    public static long FILTERNAME_COLUMN_BITMASK = 2L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.portal.util.PropsUtil.get(
                "lock.expiration.time.com.liferay.portal.ext.model.FilterScope"));
    private static ClassLoader _classLoader = FilterScope.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            FilterScope.class
        };
    private long _filterScopeId;
    private String _filterName;
    private String _originalFilterName;
    private String _className;
    private String _originalClassName;
    private long _columnBitmask;
    private FilterScope _escapedModel;

    public FilterScopeModelImpl() {
    }

    @Override
    public long getPrimaryKey() {
        return _filterScopeId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setFilterScopeId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _filterScopeId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return FilterScope.class;
    }

    @Override
    public String getModelClassName() {
        return FilterScope.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("filterScopeId", getFilterScopeId());
        attributes.put("filterName", getFilterName());
        attributes.put("className", getClassName());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long filterScopeId = (Long) attributes.get("filterScopeId");

        if (filterScopeId != null) {
            setFilterScopeId(filterScopeId);
        }

        String filterName = (String) attributes.get("filterName");

        if (filterName != null) {
            setFilterName(filterName);
        }

        String className = (String) attributes.get("className");

        if (className != null) {
            setClassName(className);
        }
    }

    @Override
    public long getFilterScopeId() {
        return _filterScopeId;
    }

    @Override
    public void setFilterScopeId(long filterScopeId) {
        _filterScopeId = filterScopeId;
    }

    @Override
    public String getFilterName() {
        if (_filterName == null) {
            return StringPool.BLANK;
        } else {
            return _filterName;
        }
    }

    @Override
    public void setFilterName(String filterName) {
        _columnBitmask |= FILTERNAME_COLUMN_BITMASK;

        if (_originalFilterName == null) {
            _originalFilterName = _filterName;
        }

        _filterName = filterName;
    }

    public String getOriginalFilterName() {
        return GetterUtil.getString(_originalFilterName);
    }

    @Override
    public String getClassName() {
        if (_className == null) {
            return StringPool.BLANK;
        } else {
            return _className;
        }
    }

    @Override
    public void setClassName(String className) {
        _columnBitmask = -1L;

        if (_originalClassName == null) {
            _originalClassName = _className;
        }

        _className = className;
    }

    public String getOriginalClassName() {
        return GetterUtil.getString(_originalClassName);
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            FilterScope.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public FilterScope toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (FilterScope) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        FilterScopeImpl filterScopeImpl = new FilterScopeImpl();

        filterScopeImpl.setFilterScopeId(getFilterScopeId());
        filterScopeImpl.setFilterName(getFilterName());
        filterScopeImpl.setClassName(getClassName());

        filterScopeImpl.resetOriginalValues();

        return filterScopeImpl;
    }

    @Override
    public int compareTo(FilterScope filterScope) {
        int value = 0;

        value = getClassName().compareTo(filterScope.getClassName());

        value = value * -1;

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof FilterScope)) {
            return false;
        }

        FilterScope filterScope = (FilterScope) obj;

        long primaryKey = filterScope.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        FilterScopeModelImpl filterScopeModelImpl = this;

        filterScopeModelImpl._originalFilterName = filterScopeModelImpl._filterName;

        filterScopeModelImpl._originalClassName = filterScopeModelImpl._className;

        filterScopeModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<FilterScope> toCacheModel() {
        FilterScopeCacheModel filterScopeCacheModel = new FilterScopeCacheModel();

        filterScopeCacheModel.filterScopeId = getFilterScopeId();

        filterScopeCacheModel.filterName = getFilterName();

        String filterName = filterScopeCacheModel.filterName;

        if ((filterName != null) && (filterName.length() == 0)) {
            filterScopeCacheModel.filterName = null;
        }

        filterScopeCacheModel.className = getClassName();

        String className = filterScopeCacheModel.className;

        if ((className != null) && (className.length() == 0)) {
            filterScopeCacheModel.className = null;
        }

        return filterScopeCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(7);

        sb.append("{filterScopeId=");
        sb.append(getFilterScopeId());
        sb.append(", filterName=");
        sb.append(getFilterName());
        sb.append(", className=");
        sb.append(getClassName());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(13);

        sb.append("<model><model-name>");
        sb.append("com.liferay.portal.ext.model.FilterScope");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>filterScopeId</column-name><column-value><![CDATA[");
        sb.append(getFilterScopeId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>filterName</column-name><column-value><![CDATA[");
        sb.append(getFilterName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>className</column-name><column-value><![CDATA[");
        sb.append(getClassName());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
