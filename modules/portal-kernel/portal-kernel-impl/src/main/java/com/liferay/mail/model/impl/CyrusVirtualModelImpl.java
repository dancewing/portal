package com.liferay.mail.model.impl;

import com.liferay.mail.model.CyrusVirtual;
import com.liferay.mail.model.CyrusVirtualModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the CyrusVirtual service. Represents a row in the &quot;CyrusVirtual&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.mail.model.CyrusVirtualModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CyrusVirtualImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see CyrusVirtualImpl
 * @see com.liferay.mail.model.CyrusVirtual
 * @see com.liferay.mail.model.CyrusVirtualModel
 * @generated
 */
public class CyrusVirtualModelImpl extends BaseModelImpl<CyrusVirtual>
    implements CyrusVirtualModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a cyrus virtual model instance should use the {@link com.liferay.mail.model.CyrusVirtual} interface instead.
     */
    public static final String TABLE_NAME = "CyrusVirtual";
    public static final Object[][] TABLE_COLUMNS = {
            { "emailAddress", Types.VARCHAR },
            { "userId", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table CyrusVirtual (emailAddress VARCHAR(75) not null primary key,userId VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table CyrusVirtual";
    public static final String ORDER_BY_JPQL = " ORDER BY cyrusVirtual.emailAddress ASC";
    public static final String ORDER_BY_SQL = " ORDER BY CyrusVirtual.emailAddress ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.portal.util.PropsUtil.get(
                "value.object.entity.cache.enabled.com.liferay.mail.model.CyrusVirtual"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.portal.util.PropsUtil.get(
                "value.object.finder.cache.enabled.com.liferay.mail.model.CyrusVirtual"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.portal.util.PropsUtil.get(
                "lock.expiration.time.com.liferay.mail.model.CyrusVirtual"));
    private static ClassLoader _classLoader = CyrusVirtual.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            CyrusVirtual.class
        };
    private String _emailAddress;
    private String _userId;
    private CyrusVirtual _escapedModel;

    public CyrusVirtualModelImpl() {
    }

    @Override
    public String getPrimaryKey() {
        return _emailAddress;
    }

    @Override
    public void setPrimaryKey(String primaryKey) {
        setEmailAddress(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _emailAddress;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey((String) primaryKeyObj);
    }

    @Override
    public Class<?> getModelClass() {
        return CyrusVirtual.class;
    }

    @Override
    public String getModelClassName() {
        return CyrusVirtual.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("emailAddress", getEmailAddress());
        attributes.put("userId", getUserId());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        String emailAddress = (String) attributes.get("emailAddress");

        if (emailAddress != null) {
            setEmailAddress(emailAddress);
        }

        String userId = (String) attributes.get("userId");

        if (userId != null) {
            setUserId(userId);
        }
    }

    @Override
    public String getEmailAddress() {
        if (_emailAddress == null) {
            return StringPool.BLANK;
        } else {
            return _emailAddress;
        }
    }

    @Override
    public void setEmailAddress(String emailAddress) {
        _emailAddress = emailAddress;
    }

    @Override
    public String getUserId() {
        if (_userId == null) {
            return StringPool.BLANK;
        } else {
            return _userId;
        }
    }

    @Override
    public void setUserId(String userId) {
        _userId = userId;
    }

    @Override
    public CyrusVirtual toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (CyrusVirtual) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        CyrusVirtualImpl cyrusVirtualImpl = new CyrusVirtualImpl();

        cyrusVirtualImpl.setEmailAddress(getEmailAddress());
        cyrusVirtualImpl.setUserId(getUserId());

        cyrusVirtualImpl.resetOriginalValues();

        return cyrusVirtualImpl;
    }

    @Override
    public int compareTo(CyrusVirtual cyrusVirtual) {
        String primaryKey = cyrusVirtual.getPrimaryKey();

        return getPrimaryKey().compareTo(primaryKey);
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof CyrusVirtual)) {
            return false;
        }

        CyrusVirtual cyrusVirtual = (CyrusVirtual) obj;

        String primaryKey = cyrusVirtual.getPrimaryKey();

        if (getPrimaryKey().equals(primaryKey)) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey().hashCode();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<CyrusVirtual> toCacheModel() {
        CyrusVirtualCacheModel cyrusVirtualCacheModel = new CyrusVirtualCacheModel();

        cyrusVirtualCacheModel.emailAddress = getEmailAddress();

        String emailAddress = cyrusVirtualCacheModel.emailAddress;

        if ((emailAddress != null) && (emailAddress.length() == 0)) {
            cyrusVirtualCacheModel.emailAddress = null;
        }

        cyrusVirtualCacheModel.userId = getUserId();

        String userId = cyrusVirtualCacheModel.userId;

        if ((userId != null) && (userId.length() == 0)) {
            cyrusVirtualCacheModel.userId = null;
        }

        return cyrusVirtualCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(5);

        sb.append("{emailAddress=");
        sb.append(getEmailAddress());
        sb.append(", userId=");
        sb.append(getUserId());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(10);

        sb.append("<model><model-name>");
        sb.append("com.liferay.mail.model.CyrusVirtual");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>emailAddress</column-name><column-value><![CDATA[");
        sb.append(getEmailAddress());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
