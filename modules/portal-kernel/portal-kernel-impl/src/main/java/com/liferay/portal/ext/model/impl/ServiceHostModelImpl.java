/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.portal.ext.model.impl;

import com.liferay.portal.ext.model.ServiceHost;
import com.liferay.portal.ext.model.ServiceHostModel;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ServiceHost service. Represents a row in the &quot;ServiceHost&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.portal.ext.model.ServiceHostModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ServiceHostImpl}.
 * </p>
 *
 * @author Jeff Qian
 * @see ServiceHostImpl
 * @see com.liferay.portal.ext.model.ServiceHost
 * @see com.liferay.portal.ext.model.ServiceHostModel
 * @generated
 */
public class ServiceHostModelImpl extends BaseModelImpl<ServiceHost>
	implements ServiceHostModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a service host model instance should use the {@link com.liferay.portal.ext.model.ServiceHost} interface instead.
	 */
	public static final String TABLE_NAME = "ServiceHost";
	public static final Object[][] TABLE_COLUMNS = {
			{ "hostId", Types.BIGINT },
			{ "code_", Types.VARCHAR },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "address", Types.VARCHAR },
			{ "protocol_", Types.VARCHAR },
			{ "port_", Types.INTEGER },
			{ "proxyHost", Types.VARCHAR },
			{ "proxyPort", Types.INTEGER },
			{ "proxyUserName", Types.VARCHAR },
			{ "proxyPassword", Types.VARCHAR },
			{ "proxyAuthType", Types.VARCHAR },
			{ "cacheResponse", Types.BOOLEAN },
			{ "maxConnectionsPerHost", Types.INTEGER },
			{ "timeout", Types.INTEGER },
			{ "scufh", Types.BOOLEAN }
		};
	public static final String TABLE_SQL_CREATE = "create table ServiceHost (hostId LONG not null primary key,code_ VARCHAR(75) null,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,address VARCHAR(75) null,protocol_ VARCHAR(75) null,port_ INTEGER,proxyHost VARCHAR(75) null,proxyPort INTEGER,proxyUserName VARCHAR(75) null,proxyPassword VARCHAR(75) null,proxyAuthType VARCHAR(75) null,cacheResponse BOOLEAN,maxConnectionsPerHost INTEGER,timeout INTEGER,scufh BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table ServiceHost";
	public static final String ORDER_BY_JPQL = " ORDER BY serviceHost.hostId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY ServiceHost.hostId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.portal.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.liferay.portal.ext.model.ServiceHost"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.portal.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.liferay.portal.ext.model.ServiceHost"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.portal.util.PropsUtil.get(
				"value.object.column.bitmask.enabled.com.liferay.portal.ext.model.ServiceHost"),
			true);
	public static long CODE_COLUMN_BITMASK = 1L;
	public static long HOSTID_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.portal.util.PropsUtil.get(
				"lock.expiration.time.com.liferay.portal.ext.model.ServiceHost"));

	public ServiceHostModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _hostId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setHostId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _hostId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ServiceHost.class;
	}

	@Override
	public String getModelClassName() {
		return ServiceHost.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("hostId", getHostId());
		attributes.put("code", getCode());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("address", getAddress());
		attributes.put("protocol", getProtocol());
		attributes.put("port", getPort());
		attributes.put("proxyHost", getProxyHost());
		attributes.put("proxyPort", getProxyPort());
		attributes.put("proxyUserName", getProxyUserName());
		attributes.put("proxyPassword", getProxyPassword());
		attributes.put("proxyAuthType", getProxyAuthType());
		attributes.put("cacheResponse", getCacheResponse());
		attributes.put("maxConnectionsPerHost", getMaxConnectionsPerHost());
		attributes.put("timeout", getTimeout());
		attributes.put("sessionCookieUseFullHostName",
			getSessionCookieUseFullHostName());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long hostId = (Long)attributes.get("hostId");

		if (hostId != null) {
			setHostId(hostId);
		}

		String code = (String)attributes.get("code");

		if (code != null) {
			setCode(code);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String address = (String)attributes.get("address");

		if (address != null) {
			setAddress(address);
		}

		String protocol = (String)attributes.get("protocol");

		if (protocol != null) {
			setProtocol(protocol);
		}

		Integer port = (Integer)attributes.get("port");

		if (port != null) {
			setPort(port);
		}

		String proxyHost = (String)attributes.get("proxyHost");

		if (proxyHost != null) {
			setProxyHost(proxyHost);
		}

		Integer proxyPort = (Integer)attributes.get("proxyPort");

		if (proxyPort != null) {
			setProxyPort(proxyPort);
		}

		String proxyUserName = (String)attributes.get("proxyUserName");

		if (proxyUserName != null) {
			setProxyUserName(proxyUserName);
		}

		String proxyPassword = (String)attributes.get("proxyPassword");

		if (proxyPassword != null) {
			setProxyPassword(proxyPassword);
		}

		String proxyAuthType = (String)attributes.get("proxyAuthType");

		if (proxyAuthType != null) {
			setProxyAuthType(proxyAuthType);
		}

		Boolean cacheResponse = (Boolean)attributes.get("cacheResponse");

		if (cacheResponse != null) {
			setCacheResponse(cacheResponse);
		}

		Integer maxConnectionsPerHost = (Integer)attributes.get(
				"maxConnectionsPerHost");

		if (maxConnectionsPerHost != null) {
			setMaxConnectionsPerHost(maxConnectionsPerHost);
		}

		Integer timeout = (Integer)attributes.get("timeout");

		if (timeout != null) {
			setTimeout(timeout);
		}

		Boolean sessionCookieUseFullHostName = (Boolean)attributes.get(
				"sessionCookieUseFullHostName");

		if (sessionCookieUseFullHostName != null) {
			setSessionCookieUseFullHostName(sessionCookieUseFullHostName);
		}
	}

	@Override
	public long getHostId() {
		return _hostId;
	}

	@Override
	public void setHostId(long hostId) {
		_hostId = hostId;
	}

	@Override
	public String getCode() {
		if (_code == null) {
			return StringPool.BLANK;
		}
		else {
			return _code;
		}
	}

	@Override
	public void setCode(String code) {
		_columnBitmask |= CODE_COLUMN_BITMASK;

		if (_originalCode == null) {
			_originalCode = _code;
		}

		_code = code;
	}

	public String getOriginalCode() {
		return GetterUtil.getString(_originalCode);
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public String getAddress() {
		if (_address == null) {
			return StringPool.BLANK;
		}
		else {
			return _address;
		}
	}

	@Override
	public void setAddress(String address) {
		_address = address;
	}

	@Override
	public String getProtocol() {
		if (_protocol == null) {
			return StringPool.BLANK;
		}
		else {
			return _protocol;
		}
	}

	@Override
	public void setProtocol(String protocol) {
		_protocol = protocol;
	}

	@Override
	public int getPort() {
		return _port;
	}

	@Override
	public void setPort(int port) {
		_port = port;
	}

	@Override
	public String getProxyHost() {
		if (_proxyHost == null) {
			return StringPool.BLANK;
		}
		else {
			return _proxyHost;
		}
	}

	@Override
	public void setProxyHost(String proxyHost) {
		_proxyHost = proxyHost;
	}

	@Override
	public int getProxyPort() {
		return _proxyPort;
	}

	@Override
	public void setProxyPort(int proxyPort) {
		_proxyPort = proxyPort;
	}

	@Override
	public String getProxyUserName() {
		if (_proxyUserName == null) {
			return StringPool.BLANK;
		}
		else {
			return _proxyUserName;
		}
	}

	@Override
	public void setProxyUserName(String proxyUserName) {
		_proxyUserName = proxyUserName;
	}

	@Override
	public String getProxyPassword() {
		if (_proxyPassword == null) {
			return StringPool.BLANK;
		}
		else {
			return _proxyPassword;
		}
	}

	@Override
	public void setProxyPassword(String proxyPassword) {
		_proxyPassword = proxyPassword;
	}

	@Override
	public String getProxyAuthType() {
		if (_proxyAuthType == null) {
			return StringPool.BLANK;
		}
		else {
			return _proxyAuthType;
		}
	}

	@Override
	public void setProxyAuthType(String proxyAuthType) {
		_proxyAuthType = proxyAuthType;
	}

	@Override
	public boolean getCacheResponse() {
		return _cacheResponse;
	}

	@Override
	public boolean isCacheResponse() {
		return _cacheResponse;
	}

	@Override
	public void setCacheResponse(boolean cacheResponse) {
		_cacheResponse = cacheResponse;
	}

	@Override
	public int getMaxConnectionsPerHost() {
		return _maxConnectionsPerHost;
	}

	@Override
	public void setMaxConnectionsPerHost(int maxConnectionsPerHost) {
		_maxConnectionsPerHost = maxConnectionsPerHost;
	}

	@Override
	public int getTimeout() {
		return _timeout;
	}

	@Override
	public void setTimeout(int timeout) {
		_timeout = timeout;
	}

	@Override
	public boolean getSessionCookieUseFullHostName() {
		return _sessionCookieUseFullHostName;
	}

	@Override
	public boolean isSessionCookieUseFullHostName() {
		return _sessionCookieUseFullHostName;
	}

	@Override
	public void setSessionCookieUseFullHostName(
		boolean sessionCookieUseFullHostName) {
		_sessionCookieUseFullHostName = sessionCookieUseFullHostName;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			ServiceHost.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ServiceHost toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ServiceHost)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ServiceHostImpl serviceHostImpl = new ServiceHostImpl();

		serviceHostImpl.setHostId(getHostId());
		serviceHostImpl.setCode(getCode());
		serviceHostImpl.setUserId(getUserId());
		serviceHostImpl.setUserName(getUserName());
		serviceHostImpl.setCreateDate(getCreateDate());
		serviceHostImpl.setModifiedDate(getModifiedDate());
		serviceHostImpl.setAddress(getAddress());
		serviceHostImpl.setProtocol(getProtocol());
		serviceHostImpl.setPort(getPort());
		serviceHostImpl.setProxyHost(getProxyHost());
		serviceHostImpl.setProxyPort(getProxyPort());
		serviceHostImpl.setProxyUserName(getProxyUserName());
		serviceHostImpl.setProxyPassword(getProxyPassword());
		serviceHostImpl.setProxyAuthType(getProxyAuthType());
		serviceHostImpl.setCacheResponse(getCacheResponse());
		serviceHostImpl.setMaxConnectionsPerHost(getMaxConnectionsPerHost());
		serviceHostImpl.setTimeout(getTimeout());
		serviceHostImpl.setSessionCookieUseFullHostName(getSessionCookieUseFullHostName());

		serviceHostImpl.resetOriginalValues();

		return serviceHostImpl;
	}

	@Override
	public int compareTo(ServiceHost serviceHost) {
		long primaryKey = serviceHost.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ServiceHost)) {
			return false;
		}

		ServiceHost serviceHost = (ServiceHost)obj;

		long primaryKey = serviceHost.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ServiceHostModelImpl serviceHostModelImpl = this;

		serviceHostModelImpl._originalCode = serviceHostModelImpl._code;

		serviceHostModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ServiceHost> toCacheModel() {
		ServiceHostCacheModel serviceHostCacheModel = new ServiceHostCacheModel();

		serviceHostCacheModel.hostId = getHostId();

		serviceHostCacheModel.code = getCode();

		String code = serviceHostCacheModel.code;

		if ((code != null) && (code.length() == 0)) {
			serviceHostCacheModel.code = null;
		}

		serviceHostCacheModel.userId = getUserId();

		serviceHostCacheModel.userName = getUserName();

		String userName = serviceHostCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			serviceHostCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			serviceHostCacheModel.createDate = createDate.getTime();
		}
		else {
			serviceHostCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			serviceHostCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			serviceHostCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		serviceHostCacheModel.address = getAddress();

		String address = serviceHostCacheModel.address;

		if ((address != null) && (address.length() == 0)) {
			serviceHostCacheModel.address = null;
		}

		serviceHostCacheModel.protocol = getProtocol();

		String protocol = serviceHostCacheModel.protocol;

		if ((protocol != null) && (protocol.length() == 0)) {
			serviceHostCacheModel.protocol = null;
		}

		serviceHostCacheModel.port = getPort();

		serviceHostCacheModel.proxyHost = getProxyHost();

		String proxyHost = serviceHostCacheModel.proxyHost;

		if ((proxyHost != null) && (proxyHost.length() == 0)) {
			serviceHostCacheModel.proxyHost = null;
		}

		serviceHostCacheModel.proxyPort = getProxyPort();

		serviceHostCacheModel.proxyUserName = getProxyUserName();

		String proxyUserName = serviceHostCacheModel.proxyUserName;

		if ((proxyUserName != null) && (proxyUserName.length() == 0)) {
			serviceHostCacheModel.proxyUserName = null;
		}

		serviceHostCacheModel.proxyPassword = getProxyPassword();

		String proxyPassword = serviceHostCacheModel.proxyPassword;

		if ((proxyPassword != null) && (proxyPassword.length() == 0)) {
			serviceHostCacheModel.proxyPassword = null;
		}

		serviceHostCacheModel.proxyAuthType = getProxyAuthType();

		String proxyAuthType = serviceHostCacheModel.proxyAuthType;

		if ((proxyAuthType != null) && (proxyAuthType.length() == 0)) {
			serviceHostCacheModel.proxyAuthType = null;
		}

		serviceHostCacheModel.cacheResponse = getCacheResponse();

		serviceHostCacheModel.maxConnectionsPerHost = getMaxConnectionsPerHost();

		serviceHostCacheModel.timeout = getTimeout();

		serviceHostCacheModel.sessionCookieUseFullHostName = getSessionCookieUseFullHostName();

		return serviceHostCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(37);

		sb.append("{hostId=");
		sb.append(getHostId());
		sb.append(", code=");
		sb.append(getCode());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", address=");
		sb.append(getAddress());
		sb.append(", protocol=");
		sb.append(getProtocol());
		sb.append(", port=");
		sb.append(getPort());
		sb.append(", proxyHost=");
		sb.append(getProxyHost());
		sb.append(", proxyPort=");
		sb.append(getProxyPort());
		sb.append(", proxyUserName=");
		sb.append(getProxyUserName());
		sb.append(", proxyPassword=");
		sb.append(getProxyPassword());
		sb.append(", proxyAuthType=");
		sb.append(getProxyAuthType());
		sb.append(", cacheResponse=");
		sb.append(getCacheResponse());
		sb.append(", maxConnectionsPerHost=");
		sb.append(getMaxConnectionsPerHost());
		sb.append(", timeout=");
		sb.append(getTimeout());
		sb.append(", sessionCookieUseFullHostName=");
		sb.append(getSessionCookieUseFullHostName());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(58);

		sb.append("<model><model-name>");
		sb.append("com.liferay.portal.ext.model.ServiceHost");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>hostId</column-name><column-value><![CDATA[");
		sb.append(getHostId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>code</column-name><column-value><![CDATA[");
		sb.append(getCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>address</column-name><column-value><![CDATA[");
		sb.append(getAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>protocol</column-name><column-value><![CDATA[");
		sb.append(getProtocol());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>port</column-name><column-value><![CDATA[");
		sb.append(getPort());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>proxyHost</column-name><column-value><![CDATA[");
		sb.append(getProxyHost());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>proxyPort</column-name><column-value><![CDATA[");
		sb.append(getProxyPort());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>proxyUserName</column-name><column-value><![CDATA[");
		sb.append(getProxyUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>proxyPassword</column-name><column-value><![CDATA[");
		sb.append(getProxyPassword());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>proxyAuthType</column-name><column-value><![CDATA[");
		sb.append(getProxyAuthType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cacheResponse</column-name><column-value><![CDATA[");
		sb.append(getCacheResponse());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>maxConnectionsPerHost</column-name><column-value><![CDATA[");
		sb.append(getMaxConnectionsPerHost());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>timeout</column-name><column-value><![CDATA[");
		sb.append(getTimeout());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sessionCookieUseFullHostName</column-name><column-value><![CDATA[");
		sb.append(getSessionCookieUseFullHostName());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ServiceHost.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			ServiceHost.class
		};
	private long _hostId;
	private String _code;
	private String _originalCode;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private String _address;
	private String _protocol;
	private int _port;
	private String _proxyHost;
	private int _proxyPort;
	private String _proxyUserName;
	private String _proxyPassword;
	private String _proxyAuthType;
	private boolean _cacheResponse;
	private int _maxConnectionsPerHost;
	private int _timeout;
	private boolean _sessionCookieUseFullHostName;
	private long _columnBitmask;
	private ServiceHost _escapedModel;
}